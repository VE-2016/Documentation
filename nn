using DevExpress.Pdf;
using DevExpress.Utils.Extensions;
using DevExpress.XtraPdfViewer;
using DevExpress.XtraPrinting;
using DevExpress.XtraRichEdit;
using DevExpress.XtraRichEdit.API.Layout;
using DevExpress.XtraRichEdit.API.Native;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static Ext;

using static PDF;
using Document = DevExpress.XtraRichEdit.API.Native.Document;
using PdfRectangle = DevExpress.Pdf.PdfRectangle;

namespace TemplatesEx
{
    public partial class SzablonyForm : Form
    {

        string filename_doc = "d.docx";

        static readonly string checkedCheckBox = '\u2612'.ToString();
        static readonly string uncheckedCheckBox = '\u2610'.ToString();

      
        public TagKind tagKind = TagKind.T;

        public SzablonyForm()
        {
            InitializeComponent();

            
            treeView.AfterSelect += TreeView_AfterSelect;

            PDF.tv = treeView;

            PDF.tvg = treeView1;

            pdf = new PDF();
            pdf.rec = richEditControl;
            pdf.pdfViewer = pdfViewer1;

            pdf.LoadFiles();

            Ext.InitTagTreeView(PDF.tvg);

            PDF.tvg.AfterSelect += Tvg_AfterSelect;

           // pdf.Load();

        }

        private void Tvg_AfterSelect(object sender, TreeViewEventArgs e)
        {
            TreeNode node = treeView1.SelectedNode;
            if (node == null)
                return;
            if (node.Tag == null)
                return;
            if (node.Tag.GetType() != typeof(TagKind))
                return;
            TagKind t = (TagKind)node.Tag;
            tagKind = t;

            var T = pdf.GetTags(t);

            tvg.BeginUpdate();

            node.Nodes.Clear();

            lbTags.Items.Clear();

            foreach(var n in T)
            {
                TreeNode nodes = new TreeNode(n);
                node.Nodes.Add(nodes);

                lbTags.Items.Add(n);
            }


            tvg.EndUpdate();
        }

        private void TreeView_AfterSelect(object sender, TreeViewEventArgs e)
        {
            richTextBox1.Text = treeView.SelectedNode.Text;
        }

        PDF pdf { get; set; }

        public void Hyperlinks(string filename)
        {
            using (PdfDocumentProcessor documentProcessor = new PdfDocumentProcessor())
            {
                documentProcessor.LoadDocument(filename);

                foreach (var page in documentProcessor.Document.Pages)
                {
                    foreach (var nn in page.Annotations)
                    {
                        if (nn.GetType() == typeof(PdfLinkAnnotation))
                        {
                            PdfLinkAnnotation p = (PdfLinkAnnotation)nn;

                            if (p.UriAction != null)
                            {
                                //PdfDocumentPosition()
                            }
                        }
                    }
                }


                //PdfFormData formData = documentProcessor.GetFormData();
                //IList<string> names = formData.GetFieldNames();


                //string[] strings = new string[names.Count];
                //names.CopyTo(strings, 0);

            }
        }
        public void Doc2Pdf(string filename)
        {
            RichEditDocumentServer wordProcessor = new RichEditDocumentServer();
            wordProcessor.LoadDocument(filename, DocumentFormat.OpenXml);

            //Specify export options:
            PdfExportOptions options = new PdfExportOptions();
            options.DocumentOptions.Author = "MJ";
            options.Compressed = false;
            options.ImageQuality = PdfJpegImageQuality.Highest;

            //Export the document to the stream:
            using (FileStream pdfFileStream = new FileStream("Document_PDF.pdf", FileMode.Create))
            {
                wordProcessor.ExportToPdf(pdfFileStream, options);
            }
            // System.Diagnostics.Process.Start("Document_PDF.pdf");
        }



        private void toolStripButton1_Click(object sender, EventArgs e)
        {
        }


        public void Modify(List<Spanner> ww)
        {

            pdfViewer1.SuspendLayout();

            try
            {
                if (pdfViewer1.IsDocumentOpened)
                    pdfViewer1.SaveDocument("d.pdf");
            }
            catch (Exception ex)
            {

            }

            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                processor.LoadDocument("d.pdf");

                PdfAcroFormTextBoxField t = null;

                if (processor.Document.AcroForm != null)
                {
                    int i = 0;

                    var fields = processor.Document.AcroForm.Fields;

                    // fields.IndexOf(t);


                    var name = fields[1].Name;

                    var index = fields.IndexOf(fields[1]);


                    foreach (var f in processor.Document.AcroForm.Fields)
                    {
                        PdfTextFormField ff = (PdfTextFormField)f;





                        //PdfAcroFormTextBoxField
                        ww[i++].Text = ff.Text;
                    }

                }
                processor.CloseDocument();
            }

            pdfViewer1.CloseDocument();


            List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {

                richEditControl.ExportToPdf("d.pdf");

                processor.LoadDocument("d.pdf");

                int i = 1;

                foreach (var s in ww)
                {
                    double top = s.first.Top;
                    double left = s.first.Left;
                    double bottom = s.second.Top - s.second.Height;
                    double right = s.second.Left + s.second.Width;

                    PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                    PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField("textbox" + i++.ToString(), s.f.PageNumber, r);


                    textBox.Text = "Text Box";

                    if (!string.IsNullOrEmpty(s.Text))
                        textBox.Text = s.Text;

                    textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
                    textBox.Appearance.FontSize = 12;
                    textBox.Multiline = true;

                    processor.AddFormFields(textBox);

                    s.textBox = textBox;

                }

                processor.SaveDocument("d.pdf");
            }


            pdfViewer1.LoadDocument("d.pdf");

            pdfViewer1.ResumeLayout();
        }




        private void toolStripButton4_Click(object sender, EventArgs e)
        {
            richEditControl.ExportToPdf(@"d.pdf");

            this.pdfViewer1.LoadDocument(@"d.pdf");

            using (PdfDocumentProcessor pdfProcessor = new PdfDocumentProcessor())
            {
                pdfProcessor.LoadDocument("_b.pdf");

                var f = pdfProcessor.Document.AcroForm;
            }
        }

 


        private void toolStripButton11_Click(object sender, EventArgs e)
        {

            pdf.Load(true);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            TreeNode node = treeView1.SelectedNode;
            if (node == null)
                return;
            if (node.Tag.GetType() != typeof(TagKind))
                return;
            TagKind t = (TagKind)node.Tag;
            tagKind = t;

            pdf.AddTag(tagKind);
        }

        private void LoadTags(TagKind t)
        {
            var T = pdf.GetTags(t);

            tvg.BeginUpdate();

            TreeNode node = tvg.NodeByTag(t);

            node.Nodes.Clear();

            lbTags.Items.Clear();

            foreach (var n in T)
            {
                TreeNode nodes = new TreeNode(n);
                node.Nodes.Add(nodes);

                lbTags.Items.Add(n);
            }

            tvg.EndUpdate();
        }

        private void lbTags_SelectedIndexChanged(object sender, EventArgs e)
        {
            int index = lbTags.SelectedIndex;
            if (index < 0)
                return;
            pdf.RemoveTagByIndex(tagKind.ToStringEx(), index);

            LoadTags(tagKind);
        }

        private void toolStripButton10_Click(object sender, EventArgs e)
        {
            pdf = new PDF();
            pdf.rec = richEditControl;
            pdf.pdfViewer = pdfViewer1;

            pdf.LoadFilesForEdit();


            pdf.Load();
        }

        private void toolStripButton1_Click_1(object sender, EventArgs e)
        {
            pdf.ReloadEditedFiles();
        }
    }

}


public class Tag
{
    public string Name { get; set; } = "";

    public PdfTextSearchResults sw { get; set; }
    public PdfOrientedRectangle r { get; set; }

    public int PageNumber { get; set; } = 0;
}

public class Spanner
{
    public string Name { get; set; } = "";

    public Tag T0 { get; set; }

    public Tag T1 { get; set; }
    public PdfOrientedRectangle first { get; set; }

    public PdfOrientedRectangle second { get; set; }

    public DocumentRange rfirst { get; set; }

    public DocumentRange rsecond { get; set; }

    public Tag f { get; set; }

    public Tag s { get; set; }

    public string linkfirst { get; set; }

    public string linksecond { get; set; }

    public string Text { get; set; } = "";

    public bool isActive { get; set; } = true;

    public PdfAcroFormTextBoxField textBox = null;


    public void AddDocumentRange(int i, DocumentRange r, string link)
    {
        if (i == 0)
        {
            rfirst = r;
            linkfirst = link;
        }
        else
        {
            rsecond = r;
            linksecond = link;
        }
    }

    public string GetText(PdfDocumentProcessor processor)
    {

        var dy = T1.sw.Rectangles[0].Top /*- T1.sw.Rectangles[0].Height*/ - 5;

        PdfDocumentPosition start = new PdfDocumentPosition(T0.sw.PageNumber, new PdfPoint(T0.sw.Rectangles[0].Left + T0.sw.Rectangles[0].Width + 3, T0.sw.Rectangles[0].Top - 5));

        PdfDocumentPosition end = new PdfDocumentPosition(T1.sw.PageNumber, new PdfPoint(T1.sw.Rectangles[0].Left -5,  dy  /*T1.sw.Rectangles[0].Top - 15*/));

        string text = processor.GetText(start, end, new PdfTextExtractionOptions() { ClipToCropBox = true });

        return text;
    }

    public string GetText(Document d)
    {


        return "text";
    }


    static public Spanner ToSpanner(Tag _f, Tag _s)
    {
        return new Spanner() { Name = _f.Name, first = _f.r, second = _s.r, f = _f, s = _s, T0 = _f, T1 = _s };
    }
}

public static class Ext
{

    static public TreeNode NodeByTag(this TreeView tv, TagKind t)
    {
        foreach(TreeNode node in tv.Nodes)
        {
            if (node.Tag == null)
                continue;
            if (node.Tag.GetType() != typeof(TagKind))
                continue;
            TagKind tt = (TagKind)node.Tag;

            if (tt == t)
                return node;

        }
        return null;
    }

    static public string ToStringEx(this TagKind t)
    {
        switch (t)
        {
            case TagKind.T:
                return @"<T>";
            case TagKind.F:
                return @"<F>";
            case TagKind.S:
                return @"<S>";
            default:
                return "";
        }
    }

    static public void InitTagTreeView(TreeView tv)
    {
        TreeNode node = new TreeNode("T - wprowadz tekst");
        node.Tag = TagKind.T;
        tv.Nodes.Add(node);
        node = new TreeNode("F - wprowadz tekst");
        node.Tag = TagKind.F;
        tv.Nodes.Add(node);
        node = new TreeNode("S - pokaz / zakryj tekst");
        node.Tag = TagKind.S;
        tv.Nodes.Add(node);

        tv.HideSelection = false;
    }

    static public PdfDocumentProcessor Processor(this string filename)
    {

        PdfDocumentProcessor processor = new PdfDocumentProcessor();
        {
            processor.LoadDocument(filename);
            return processor;
        }

    }

    static public PdfDocumentProcessor GetWords(this string filename)
    {

        PdfDocumentProcessor processor = new PdfDocumentProcessor();
        {

           
            processor.LoadDocument(filename);
            return processor;
        }

    }

    static public List<PdfPageWord> Words(this PdfDocumentProcessor processor)
    {
        List<PdfPageWord> WordCoordinates = new List<PdfPageWord>();
        {
            PdfPageWord currentWord = (PdfPageWord)processor.NextWord();
            while (currentWord != null)
            {
                for (int i = 0; i < currentWord.Rectangles.Count; i++)
                {
                    //Retrieve the rectangle encompassing the word
                    var word = currentWord;

                    //Add the segment's content and its coordinates to the list
                    WordCoordinates.Add(word);
                }
                //Switch to the next word
                currentWord = processor.NextWord();
            }
            return WordCoordinates;
        }
    }

    static IList<PdfInteractiveFormField> Fields { get; set; }

    static public void ToNode(this TreeView v, PdfAcroFormTextBoxField f)
    {
        TreeNode node = new TreeNode();
        node.Text = f.Text;
        v.Nodes.Add(node);
    }

    static public void AddAndReplace(this PdfDocumentProcessor processor, Dictionary<string, PdfAcroFormTextBoxField> d, string name)
    {
        if (!d.ContainsKey(name))
            return;

        var Field = d[name];

        var fields = processor.Document.AcroForm.Fields;

        var field = fields.Where(s => s.Name == name).ToArray()[0];

        int i = fields.IndexOf(field);

        fields.Remove(field);

        string text = ((PdfTextFormField)field).Text;

        Field.Text = text + "super";

        processor.AddFormFields(Field);

        //field = fields.Where(s => s.Name == name).ToArray()[0];

        //i = fields.IndexOf(field);

        //fields.Remove(field);

        //fields.Insert(i, field);

    }

    static public Tag ToTag(this PdfTextSearchResults s)
    {

        Tag t = new Tag();

        t.sw = s;

        var ws = s.Words.Select(w => w.Text).ToList();

        t.Name = string.Concat(ws);

        t.r = s.Rectangles[0];

        t.PageNumber = s.PageNumber;

        return t;

    }

    static public void AddDocumentRange(this List<Spanner> s, int i, DocumentRange r, string link, string text = "")
    {
        int index = i / 2;

        int c = s.Count;

        if (c == 0)
            return;

        if (index >= c)
            return;

        s[index].AddDocumentRange(i % 2, r, link);
    }

    static public Spanner LinkToSpanner(this List<Spanner> s, string link)
    {

        foreach (var spanner in s)
        {
            if (spanner.linkfirst == link || spanner.linksecond == link)
                return spanner;
        }
        return null;
    }

}
public class PDF
{
    public static TreeView tv { get; set; }

    public static TreeView tvg { get; set; }

    public PdfViewer pdfViewer { get; set; }

    public RichEditControl rec { get; set; }

    List<Spanner> spanners = new List<Spanner>();

    List<Spanner> ww = new List<Spanner>();

    List<Spanner> f = new List<Spanner>();

    public List<PdfAcroFormField> fields = new List<PdfAcroFormField>();

    MemoryStream msbase = new MemoryStream();

    MemoryStream msworking = new MemoryStream();

    Dictionary<string, PdfAcroFormTextBoxField> dictLink2T = new Dictionary<string, PdfAcroFormTextBoxField>();


    public PDF()
    {

    }

    public void RemoveTagByIndex(string tg, int index)
    {
        var t = SearchEditControlRanges(tg);

        if(index >= t.Count)
        {
            MessageBox.Show("Index of of range");
            return;
        }

        var range = t[index];

        var document = rec.Document;

        CharacterProperties Formatting = document.BeginUpdateCharacters(range);

        DocumentRange start = document.CreateRange(range.End.ToInt(), 3);

        document.Replace(start, "   ");

        start = document.CreateRange(range.Start.ToInt(), 3);

        document.Replace(start, "   ");
    
        document.EndUpdateCharacters(Formatting);
    }


    public void AddTag(TagKind t)
    {
        if(rec == null || rec.Document == null)
        {
            MessageBox.Show("No docx file loaded.");
            return;
        }
        DocumentRange selection = rec.Document.Selection;
        string selectedText = rec.Document.GetText(selection);

        if (string.IsNullOrEmpty(selectedText))
        {
            MessageBox.Show("No text selected to tagging.");
            return;
        }

        string tag = @t.ToStringEx();

        var document = rec.Document;

        //Provide access to the character properties
        CharacterProperties Formatting = document.BeginUpdateCharacters(selection);

        document.InsertText(selection.End, "   ");
        document.InsertText(selection.End, tag);

        document.InsertText(selection.Start, "   ");
        document.InsertText(selection.Start, tag);

     
        document.EndUpdateCharacters(Formatting);

    }

    public List<string> GetTags(string tg)
    {
        var T = SearchEditControl(tg);
        return T;
    }

    public string  GetText(string tg, int index)
    {
        var T = SearchEditControlText(tg);
        return T[index];
    }

    public List<string> GetTags(TagKind t)
    {
        var T = SearchEditControl(t.ToStringEx());
        return T;
    }

    public void SaveToStream(MemoryStream s)
    {
        rec.SaveDocument(s, DocumentFormat.OpenXml);
       // pdfViewer.LoadDocument(s);
    }

    public void LoadFiles()
    {
        rec.LoadDocument("d.docx");
      
       // rec.ExportToPdf("d.pdf");
       // SaveToStream(msbase);
      //  pdfViewer.LoadDocument("d.pdf");
      //  pdfViewer.UriOpening += PdfViewer_UriOpening;
    }

    public void LoadFilesForEdit()
    {
        if (pdfViewer.IsDocumentOpened)
            pdfViewer.CloseDocument();

        rec.LoadDocument("d.docx");

        rec.ExportToPdf("d.pdf");
        SaveToStream(msbase);
        pdfViewer.LoadDocument("d.pdf");
        pdfViewer.UriOpening += PdfViewer_UriOpening;
    }
    public void ReloadEditedFiles()
    {
        if (pdfViewer.IsDocumentOpened)
            pdfViewer.CloseDocument();

      //  rec.LoadDocument("d.docx");

        rec.ExportToPdf("d.pdf");
       // SaveToStream(msbase);
        pdfViewer.LoadDocument("d.pdf");
        pdfViewer.UriOpening += PdfViewer_UriOpening;

        Load();
    }
    private void PdfViewer_UriOpening(object sender, PdfUriOpeningEventArgs e)
    {
        var s = e.Uri.OriginalString;
        MessageBox.Show(s);
        CheckIfNeeded("f1");
    }

    public void Load(bool saveOnly = false)
    {
        List<Spanner> q = NewMethod("<S>").ToArray().ToList();
        spanners = q;
        SearchEditControl("<S>", q);//U+2611
        string codePoint = "2611";
        int code = int.Parse(codePoint, System.Globalization.NumberStyles.HexNumber);
        string unicodeString = char.ConvertFromUtf32(code);
        foreach (var s in spanners)
        {
         

            SubDocument doc = s.rsecond.BeginUpdateDocument();

            //var p = rec.Document.CreatePosition(s.rsecond.End.ToInt());

            //var rr = rec.Document.CreateRange(p, 3);

            //string plainText = doc.GetText(s.rsecond);
            //MessageBox.Show(plainText, "Selected Text");

          
            //rec.Document.Replace(rr, "");
            rec.Document.Replace(s.rfirst, unicodeString);
            rec.Document.Replace(s.rsecond, unicodeString);

            s.rsecond.EndUpdateDocument(doc);
        }
        var www = NewMethod("<T>").ToArray().ToList();
       // SearchEditControl(rec, "<T>", www, "t");

        var f = NewMethod("<F>").ToArray().ToList();
        SearchEditControl("<F>", f, "f");
        foreach (var s in f)
        {
         

            codePoint = "23FA";// "2615";
            code = int.Parse(codePoint, System.Globalization.NumberStyles.HexNumber);
            unicodeString = char.ConvertFromUtf32(code);

            DocumentRange range = s.rsecond;

            var p = rec.Document.CreatePosition(range.End.ToInt());

            var rr = rec.Document.CreateRange(p, 1);

          // SubDocument doc = range.BeginUpdateDocument();
          //  string plainText = doc.GetText(range);
          // // MessageBox.Show(plainText, "Selected Text");
           
          ////  var r = doc.InsertText(range.End, "<-");
            rec.Document.Replace(rr, unicodeString);
          //  range.EndUpdateDocument(doc);

            //  rec.Document.Replace(s.rsecond, "");
           
        }
        if (saveOnly)
        {
            pdfViewer.CloseDocument();
            rec.ExportToPdf("d.pdf");
            return;
        }

        Modify(www, f);

    }

    private static List<Spanner> NewMethod(string s)
    {
        List<Spanner> spanners = new List<Spanner>();
        PdfTextSearchParameters c = new PdfTextSearchParameters();
        c.WholeWords = false;
        c.CaseSensitive = true;
        List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");
            PdfTextSearchResults currentWords = processor.FindText(s, c);
            while (currentWords.Status == PdfTextSearchStatus.Found)
            {
                WordCoordinates.Add(currentWords);
                currentWords = processor.FindText(s, c);
            }

        var q = WordCoordinates.ToArray().ToList();
        while (q.Count > 1)
        {
            spanners.Add(Spanner.ToSpanner(q[0].ToTag(), q[1].ToTag()));

               // var text = spanners[spanners.Count - 1].GetText(processor);
               // MessageBox.Show(text);

                q.RemoveAt(0);
            q.RemoveAt(0);
        }

    }
        return spanners;
    }

    CharacterProperties cp = null;

    double fontsize = 0;
    string ft = "";


    private List<string> SearchEditControl(string text)
    {
        var document = rec.Document;

        List<string> t = new List<string>();
      
        ISearchResult searchResult = document.StartSearch(text);

        while (searchResult.FindNext())
        {
            var start = searchResult.CurrentResult.Start;

            if (searchResult.FindNext())
            {
                var end = searchResult.CurrentResult.Start;

                var range = document.CreateRange(start, end.ToInt() - start.ToInt());

                t.Add(document.GetText(range));
            }

        }

        return t;
    }
    private List<string> SearchEditControlText(string text)
    {
        var document = rec.Document;

        List<string> t = new List<string>();

        ISearchResult searchResult = document.StartSearch(text);

        while (searchResult.FindNext())
        {
            var start = searchResult.CurrentResult.Start;

          //  var s = document.CreateRange(document.CreatePosition(start.ToInt() + 3), 1);

            if (searchResult.FindNext())
            {
                var end = searchResult.CurrentResult.Start;

                var range = document.CreateRange(start.ToInt() + 3, end.ToInt() - start.ToInt() - 3);

                t.Add(document.GetText(range));
            }

        }

        return t;
    }
    private List<DocumentRange> SearchEditControlRanges(string text)
    {
        var document = rec.Document;

        List<DocumentRange> t = new List<DocumentRange>();

        ISearchResult searchResult = document.StartSearch(text);

        while (searchResult.FindNext())
        {
            var start = searchResult.CurrentResult.Start;

            if (searchResult.FindNext())
            {
                var end = searchResult.CurrentResult.Start;

                var range = document.CreateRange(start, end.ToInt() - start.ToInt());

                t.Add(range);
            }

        }

        return t;
    }

    private void SearchEditControl(string text, List<Spanner> spanners, string prefix = "")
    {

        List<DocumentRange> results = new List<DocumentRange>();
        var document = rec.Document;
        ISearchResult searchResult = rec.Document.StartSearch(text);

        while (searchResult.FindNext())
        {
            cp = rec.Document.BeginUpdateCharacters(searchResult.CurrentResult.End, 1);

            ft = cp.FontName;
            fontsize = cp.FontSize.Value;

            // cp.Bold = true;
            cp.ForeColor = System.Drawing.Color.Blue;
            cp.BackColor = System.Drawing.Color.Yellow;
            cp.Underline = UnderlineType.ThickSingle;
            rec.Document.EndUpdateCharacters(cp);
            results.Add(searchResult.CurrentResult);
           
        }
        int k = 0;
        int i = 0;
        foreach (var r in results)
        {
            //string Text = "";
            //if (!string.IsNullOrEmpty(prefix))
            if(text.Equals("<S>"))
            if (i % 2 == 1)
            {
                        var range = rec.Document.CreateRange(results[i].Start, results[i].Length/*+1*/);
                        var Text = rec.Document.GetText(range);
              //  MessageBox.Show(Text);
                rec.Document.Replace(range, "    ");

            }
            //        var a = results[i + 1].Start.ToInt();

            //        var b = results[i].End.ToInt();

            //        var range = rec.Document.CreateRange(results[i - 1].End, results[i].Start.ToInt() - results[i - 1].End.ToInt());

            //        Text = rec.Document.GetText(range);

            //        if (!Text.StartsWith("F"))

            //            Text = "";
            //    };

            //  else continue;
            string link = i.ToString();
        //    if (string.IsNullOrEmpty(Text))
            {
                var h = document.Hyperlinks.Create(r.End, 1);
                h.NavigateUri = prefix + i.ToString();
                h.ToolTip = prefix + i.ToString();
            }
            //else
            //{
            //    var h = document.Hyperlinks.Create(r.End, 4);
            //    h.NavigateUri = "6";
            //    h.ToolTip = prefix + i.ToString();
            //}
            //if (!string.IsNullOrEmpty(Text))
            //{
            //    //            h.NavigateUri = prefix + Text;
            //}
            spanners.AddDocumentRange(i, r, link, "Text");
            i++;
        }
    }
    public void CheckIfNeeded(string link)
    {
      //  Spanner s = spanners.LinkToSpanner(link);
      //  if (s == null)
       //     return;

        var document = rec.Document;
        document.BeginUpdate();

        //DocumentRange range = s.rfirst;
        //DocumentRange rr = s.rsecond;
        //CharacterProperties cp = document.BeginUpdateCharacters(range.Start, rr.Start.ToInt() - range.End.ToInt());

        ////cp.FontName = "Comic Sans MS";
        //if (s.isActive)
        //{
        //    // cp.FontSize = 18;
        //    cp.ForeColor = Color.Blue;
        //}
        //else
        //{
        //    //  cp.FontSize = 14;
        //    cp.ForeColor = Color.Black;
        //}
        //s.isActive = !s.isActive;
        //cp.BackColor = Color.Snow;
        //cp.Underline = UnderlineType.DoubleWave;
        //cp.UnderlineColor = Color.Red;

        //document.EndUpdateCharacters(cp);
        var b = rec.Document.Hyperlinks.Where(s => s.NavigateUri.StartsWith("f")).ToArray();
       // foreach (var h in b)
            
        //    rec.Document.Hyperlinks.Remove(h);
        var ww = NewMethod("<T>").ToArray().ToList();
        var ff = NewMethod("<F>").ToArray().ToList();
        // SearchEditControl(rec, "<T>", ww, "f");
        document.EndUpdate();
        ModifyEx(ww, ff);
        //f = ff;
        this.ww = ww;
        //  Update();
    }

    public void Modify(List<Spanner> wws, List<Spanner> ff)
    {
        if (pdfViewer.IsDocumentOpened)
            pdfViewer.CloseDocument();


        List<PdfTextFormField> fl = new List<PdfTextFormField>();

        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");

            if (processor.Document.AcroForm != null)
            {
                int i = 0;
                foreach (var f in processor.Document.AcroForm.Fields)
                {
                    PdfTextFormField tf = (PdfTextFormField)f;
                    if (ww.Count > i)
                        ww[i++].Text = tf.Text;

                    if (dictLink2T.ContainsKey(tf.Name))
                    {
                        dictLink2T[tf.Name].Text = tf.Text;
                    }

                    fl.Add(tf);
                }
            }
            processor.CloseDocument();
        }

        pdfViewer.CloseDocument();

        rec.ExportToPdf("d.pdf");


        float vScrollPosition = pdfViewer.VerticalScrollPosition;
        pdfViewer.SuspendLayout();
        pdfViewer.CloseDocument();
        List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            dictLink2T = new Dictionary<string, PdfAcroFormTextBoxField>();
            rec.ExportToPdf("d.pdf");
            processor.LoadDocument("d.pdf");
            int i = 1;
            int k = 0;
            foreach (var s in wws)
            {
                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width;

                string Name = "textbox" + i++.ToString();

            //    if (!string.IsNullOrEmpty(s.TextForLink))

             //       Name = s.TextForLink;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(Name, s.f.PageNumber, r);

                textBox.Appearance.FontFamily = ft;
                textBox.Appearance.FontSize = (float)fontsize;
  
                if(!dictLink2T.ContainsKey(Name))
                    dictLink2T.Add(Name, textBox);

                textBox.Text = GetText("<T>", k++);
                if (ww.Count > k)
                {
                    var n = ww.Where(c => c.Name == Name).ToList();

                    if (n.Count > 0)
                        textBox.Text = n[0].Text;// ww[k++].Text;

                    var nn = fl.Where(c => c.Name == Name).ToList();
                    if (nn.Count > 0)
                        textBox.Text = nn[0].Text;
                }
                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
             //   textBox.Appearance.FontSize = 12;
                textBox.Multiline = true;
                processor.AddFormFields(textBox);
                s.textBox = textBox;

                if (PDF.tv != null)
                    PDF.tv.ToNode(textBox);
            }
            i = 1;
            k = 0;
            foreach (var s in ff)
            {
                //if (s.textBox == null)
                //            continue;
                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width + 1;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                var name = "f" + i++.ToString();

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(name, s.f.PageNumber, r);

                dictLink2T.Add(name, textBox);

                textBox.Text = GetText("<F>", k++);

                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);

                textBox.Appearance.FontSize = fontsize;

                textBox.Multiline = true;

                processor.AddFormFields(textBox);

                s.textBox = textBox;

                if (PDF.tv != null)
                    PDF.tv.ToNode(textBox);
            }
            processor.SaveDocument("d.pdf");
        }
        pdfViewer.LoadDocument("d.pdf");
        pdfViewer.VerticalScrollPosition = vScrollPosition;
        pdfViewer.ResumeLayout();
    }

    public void ModifyEx(List<Spanner> wws, List<Spanner> ff)
    {
        if (pdfViewer.IsDocumentOpened)
            pdfViewer.SaveDocument("d.pdf");

        List<PdfTextFormField> fl = new List<PdfTextFormField>();

        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");

            if (processor.Document.AcroForm != null)
            {
                int i = 0;
                foreach (var f in processor.Document.AcroForm.Fields)
                {
                    PdfTextFormField tf = (PdfTextFormField)f;
                    if (ww.Count > i)
                        ww[i++].Text = tf.Text;

                    fl.Add(tf);
                }
            }
            processor.CloseDocument();
        }
        float vScrollPosition = pdfViewer.VerticalScrollPosition;
        pdfViewer.SuspendLayout();
        pdfViewer.CloseDocument();
        List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
         //   dictLink2T = new Dictionary<string, PdfAcroFormTextBoxField>();
           // rec.ExportToPdf("d.pdf");
            processor.LoadDocument("d.pdf");
            int i = 1;
            int k = 0;
            foreach (var s in wws)
            {
                string Name = "textbox" + i++.ToString();

                processor.AddAndReplace(dictLink2T, Name);

                continue;

                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width - 1;

               // string Name = "textbox" + i++.ToString();

                //    if (!string.IsNullOrEmpty(s.TextForLink))

                //       Name = s.TextForLink;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(Name, s.f.PageNumber, r);

             //   if (!dictLink2T.ContainsKey(Name))

             //       dictLink2T.Add(Name, textBox);

                textBox.Text = "";
                if (ww.Count > k)
                {
                    var n = ww.Where(c => c.Name == Name).ToList();

                    if (n.Count > 0)
                        textBox.Text = n[0].Text;// ww[k++].Text;

                    var nn = fl.Where(c => c.Name == Name).ToList();
                    if (nn.Count > 0)
                        textBox.Text = nn[0].Text;
                }
                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
                textBox.Appearance.FontSize = 12;
                textBox.Multiline = true;
                processor.AddFormFields(textBox);
                s.textBox = textBox;
            }
            i = 1;
            foreach (var s in ff)
            {
                var name = "f" + i++.ToString();

                processor.AddAndReplace(dictLink2T, name);

                continue;

                //if (s.textBox == null)
                //            continue;
                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

              

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(name, s.f.PageNumber, r);

                dictLink2T.Add(name, textBox);

                textBox.Text = "-------";

                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);

                textBox.Appearance.FontSize = 12;

                textBox.Multiline = true;

                processor.AddFormFields(textBox);

                s.textBox = textBox;
            }
            processor.SaveDocument("d.pdf");
        }
        pdfViewer.LoadDocument("d.pdf");
        pdfViewer.VerticalScrollPosition = vScrollPosition;
        pdfViewer.ResumeLayout();
    }
    public void Add(PdfAcroFormTextBoxField f)
    {

    }
    public void Replace(PdfAcroFormTextBoxField t = null)
    {
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");

            if (processor.Document.AcroForm != null)
            {
                var fields = processor.Document.AcroForm.Fields;

                int i = 0;

                var F = new List<PdfInteractiveFormField>();

                F.AddRange(fields.ToList());

                fields.Clear();

                // fields.IndexOf(t);

                var name = fields[1].Name;

                var index = fields.IndexOf(fields[1]);

                foreach (var f in processor.Document.AcroForm.Fields)
                {
                    PdfTextFormField ff = (PdfTextFormField)f;
                    //PdfAcroFormTextBoxField
                    //  ww[i++].Text = ff.Text;
                }
            }
            processor.CloseDocument();
        }
    }

    public enum TagKind{

        T,
        F,
        S
    }
}


namespace TemplatesEx
{
    partial class SzablonyForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SzablonyForm));
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStrip1 = new System.Windows.Forms.ToolStrip();
            this.toolStripButton10 = new System.Windows.Forms.ToolStripButton();
            this.toolStripButton11 = new System.Windows.Forms.ToolStripButton();
            this.splitContainer = new System.Windows.Forms.SplitContainer();
            this.richTextBox1 = new System.Windows.Forms.RichTextBox();
            this.treeView = new System.Windows.Forms.TreeView();
            this.splitContainer2 = new System.Windows.Forms.SplitContainer();
            this.xtraTabControl1 = new DevExpress.XtraTab.XtraTabControl();
            this.xtraTabPage1 = new DevExpress.XtraTab.XtraTabPage();
            this.toolStrip2 = new System.Windows.Forms.ToolStrip();
            this.toolStripButton4 = new System.Windows.Forms.ToolStripButton();
            this.toolStripButton5 = new System.Windows.Forms.ToolStripButton();
            this.toolStripButton6 = new System.Windows.Forms.ToolStripButton();
            this.toolStripButton7 = new System.Windows.Forms.ToolStripButton();
            this.richEditControl = new DevExpress.XtraRichEdit.RichEditControl();
            this.xtraTabPage2 = new DevExpress.XtraTab.XtraTabPage();
            this.pdfViewer1 = new DevExpress.XtraPdfViewer.PdfViewer();
            this.toolStrip3 = new System.Windows.Forms.ToolStrip();
            this.toolStripButton8 = new System.Windows.Forms.ToolStripButton();
            this.toolStripButton9 = new System.Windows.Forms.ToolStripButton();
            this.tpTags = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.propertyGrid = new System.Windows.Forms.PropertyGrid();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.treeView1 = new System.Windows.Forms.TreeView();
            this.button2 = new System.Windows.Forms.Button();
            this.lbTags = new System.Windows.Forms.ListBox();
            this.button1 = new System.Windows.Forms.Button();
            this.toolStripButton1 = new System.Windows.Forms.ToolStripButton();
            this.toolStrip1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer)).BeginInit();
            this.splitContainer.Panel1.SuspendLayout();
            this.splitContainer.Panel2.SuspendLayout();
            this.splitContainer.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).BeginInit();
            this.splitContainer2.Panel1.SuspendLayout();
            this.splitContainer2.Panel2.SuspendLayout();
            this.splitContainer2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.xtraTabControl1)).BeginInit();
            this.xtraTabControl1.SuspendLayout();
            this.xtraTabPage1.SuspendLayout();
            this.toolStrip2.SuspendLayout();
            this.xtraTabPage2.SuspendLayout();
            this.toolStrip3.SuspendLayout();
            this.tpTags.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.SuspendLayout();
            // 
            // menuStrip1
            // 
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(995, 24);
            this.menuStrip1.TabIndex = 0;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // statusStrip1
            // 
            this.statusStrip1.Location = new System.Drawing.Point(0, 483);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(995, 22);
            this.statusStrip1.TabIndex = 1;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // toolStrip1
            // 
            this.toolStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButton10,
            this.toolStripButton11,
            this.toolStripButton1});
            this.toolStrip1.Location = new System.Drawing.Point(0, 24);
            this.toolStrip1.Name = "toolStrip1";
            this.toolStrip1.Size = new System.Drawing.Size(995, 25);
            this.toolStrip1.TabIndex = 2;
            this.toolStrip1.Text = "toolStrip1";
            // 
            // toolStripButton10
            // 
            this.toolStripButton10.Name = "toolStripButton10";
            this.toolStripButton10.Size = new System.Drawing.Size(95, 22);
            this.toolStripButton10.Text = "Edycja szablonu";
            this.toolStripButton10.Click += new System.EventHandler(this.toolStripButton10_Click);
            // 
            // toolStripButton11
            // 
            this.toolStripButton11.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.toolStripButton11.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButton11.Image")));
            this.toolStripButton11.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButton11.Name = "toolStripButton11";
            this.toolStripButton11.Size = new System.Drawing.Size(123, 22);
            this.toolStripButton11.Text = "Save template as PDF";
            this.toolStripButton11.Click += new System.EventHandler(this.toolStripButton11_Click);
            // 
            // splitContainer
            // 
            this.splitContainer.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer.Location = new System.Drawing.Point(0, 49);
            this.splitContainer.Name = "splitContainer";
            // 
            // splitContainer.Panel1
            // 
            this.splitContainer.Panel1.Controls.Add(this.richTextBox1);
            this.splitContainer.Panel1.Controls.Add(this.treeView);
            // 
            // splitContainer.Panel2
            // 
            this.splitContainer.Panel2.Controls.Add(this.splitContainer2);
            this.splitContainer.Size = new System.Drawing.Size(995, 434);
            this.splitContainer.SplitterDistance = 169;
            this.splitContainer.TabIndex = 3;
            // 
            // richTextBox1
            // 
            this.richTextBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.richTextBox1.Location = new System.Drawing.Point(2, 320);
            this.richTextBox1.Name = "richTextBox1";
            this.richTextBox1.Size = new System.Drawing.Size(163, 108);
            this.richTextBox1.TabIndex = 1;
            this.richTextBox1.Text = "";
            // 
            // treeView
            // 
            this.treeView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.treeView.Location = new System.Drawing.Point(3, 3);
            this.treeView.Name = "treeView";
            this.treeView.Size = new System.Drawing.Size(163, 307);
            this.treeView.TabIndex = 0;
            // 
            // splitContainer2
            // 
            this.splitContainer2.Dock = System.Windows.Forms.DockStyle.Fill;
            this.splitContainer2.Location = new System.Drawing.Point(0, 0);
            this.splitContainer2.Name = "splitContainer2";
            // 
            // splitContainer2.Panel1
            // 
            this.splitContainer2.Panel1.Controls.Add(this.xtraTabControl1);
            // 
            // splitContainer2.Panel2
            // 
            this.splitContainer2.Panel2.Controls.Add(this.tpTags);
            this.splitContainer2.Size = new System.Drawing.Size(822, 434);
            this.splitContainer2.SplitterDistance = 675;
            this.splitContainer2.TabIndex = 0;
            // 
            // xtraTabControl1
            // 
            this.xtraTabControl1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.xtraTabControl1.Location = new System.Drawing.Point(0, 0);
            this.xtraTabControl1.Name = "xtraTabControl1";
            this.xtraTabControl1.SelectedTabPage = this.xtraTabPage1;
            this.xtraTabControl1.Size = new System.Drawing.Size(675, 434);
            this.xtraTabControl1.TabIndex = 1;
            this.xtraTabControl1.TabPages.AddRange(new DevExpress.XtraTab.XtraTabPage[] {
            this.xtraTabPage1,
            this.xtraTabPage2});
            // 
            // xtraTabPage1
            // 
            this.xtraTabPage1.Controls.Add(this.toolStrip2);
            this.xtraTabPage1.Controls.Add(this.richEditControl);
            this.xtraTabPage1.Name = "xtraTabPage1";
            this.xtraTabPage1.Size = new System.Drawing.Size(673, 409);
            this.xtraTabPage1.Text = "DOCX";
            // 
            // toolStrip2
            // 
            this.toolStrip2.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButton4,
            this.toolStripButton5,
            this.toolStripButton6,
            this.toolStripButton7});
            this.toolStrip2.Location = new System.Drawing.Point(0, 0);
            this.toolStrip2.Name = "toolStrip2";
            this.toolStrip2.Size = new System.Drawing.Size(673, 25);
            this.toolStrip2.TabIndex = 1;
            this.toolStrip2.Text = "toolStrip2";
            // 
            // toolStripButton4
            // 
            this.toolStripButton4.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.toolStripButton4.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButton4.Image")));
            this.toolStripButton4.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButton4.Name = "toolStripButton4";
            this.toolStripButton4.Size = new System.Drawing.Size(71, 22);
            this.toolStripButton4.Text = "Export-PDF";
            this.toolStripButton4.Click += new System.EventHandler(this.toolStripButton4_Click);
            // 
            // toolStripButton5
            // 
            this.toolStripButton5.Name = "toolStripButton5";
            this.toolStripButton5.Size = new System.Drawing.Size(23, 22);
            // 
            // toolStripButton6
            // 
            this.toolStripButton6.Name = "toolStripButton6";
            this.toolStripButton6.Size = new System.Drawing.Size(23, 22);
            // 
            // toolStripButton7
            // 
            this.toolStripButton7.Name = "toolStripButton7";
            this.toolStripButton7.Size = new System.Drawing.Size(23, 22);
            // 
            // richEditControl
            // 
            this.richEditControl.Dock = System.Windows.Forms.DockStyle.Fill;
            this.richEditControl.Location = new System.Drawing.Point(0, 0);
            this.richEditControl.Name = "richEditControl";
            this.richEditControl.Size = new System.Drawing.Size(673, 409);
            this.richEditControl.TabIndex = 0;
            this.richEditControl.Text = "richEditControl1";
            // 
            // xtraTabPage2
            // 
            this.xtraTabPage2.Controls.Add(this.pdfViewer1);
            this.xtraTabPage2.Controls.Add(this.toolStrip3);
            this.xtraTabPage2.Name = "xtraTabPage2";
            this.xtraTabPage2.Size = new System.Drawing.Size(673, 409);
            this.xtraTabPage2.Text = "PDF";
            // 
            // pdfViewer1
            // 
            this.pdfViewer1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pdfViewer1.Location = new System.Drawing.Point(0, 25);
            this.pdfViewer1.Name = "pdfViewer1";
            this.pdfViewer1.Size = new System.Drawing.Size(673, 384);
            this.pdfViewer1.TabIndex = 1;
            // 
            // toolStrip3
            // 
            this.toolStrip3.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButton8,
            this.toolStripButton9});
            this.toolStrip3.Location = new System.Drawing.Point(0, 0);
            this.toolStrip3.Name = "toolStrip3";
            this.toolStrip3.Size = new System.Drawing.Size(673, 25);
            this.toolStrip3.TabIndex = 0;
            this.toolStrip3.Text = "toolStrip3";
            // 
            // toolStripButton8
            // 
            this.toolStripButton8.Name = "toolStripButton8";
            this.toolStripButton8.Size = new System.Drawing.Size(23, 22);
            // 
            // toolStripButton9
            // 
            this.toolStripButton9.Name = "toolStripButton9";
            this.toolStripButton9.Size = new System.Drawing.Size(23, 22);
            // 
            // tpTags
            // 
            this.tpTags.Controls.Add(this.tabPage1);
            this.tpTags.Controls.Add(this.tabPage2);
            this.tpTags.Dock = System.Windows.Forms.DockStyle.Fill;
            this.tpTags.Location = new System.Drawing.Point(0, 0);
            this.tpTags.Name = "tpTags";
            this.tpTags.SelectedIndex = 0;
            this.tpTags.Size = new System.Drawing.Size(143, 434);
            this.tpTags.TabIndex = 1;
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.propertyGrid);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(135, 408);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "Properties";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // propertyGrid
            // 
            this.propertyGrid.Dock = System.Windows.Forms.DockStyle.Fill;
            this.propertyGrid.Location = new System.Drawing.Point(3, 3);
            this.propertyGrid.Name = "propertyGrid";
            this.propertyGrid.Size = new System.Drawing.Size(129, 402);
            this.propertyGrid.TabIndex = 0;
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.treeView1);
            this.tabPage2.Controls.Add(this.button2);
            this.tabPage2.Controls.Add(this.lbTags);
            this.tabPage2.Controls.Add(this.button1);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(135, 408);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "Tags";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // treeView1
            // 
            this.treeView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.treeView1.Location = new System.Drawing.Point(2, 6);
            this.treeView1.Name = "treeView1";
            this.treeView1.Size = new System.Drawing.Size(126, 211);
            this.treeView1.TabIndex = 3;
            // 
            // button2
            // 
            this.button2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.button2.Location = new System.Drawing.Point(7, 379);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(123, 23);
            this.button2.TabIndex = 2;
            this.button2.Text = "Remove";
            this.button2.UseVisualStyleBackColor = true;
            // 
            // lbTags
            // 
            this.lbTags.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.lbTags.FormattingEnabled = true;
            this.lbTags.Location = new System.Drawing.Point(7, 223);
            this.lbTags.Name = "lbTags";
            this.lbTags.Size = new System.Drawing.Size(119, 121);
            this.lbTags.TabIndex = 1;
            this.lbTags.SelectedIndexChanged += new System.EventHandler(this.lbTags_SelectedIndexChanged);
            // 
            // button1
            // 
            this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.button1.Location = new System.Drawing.Point(6, 350);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(123, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "Add";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // toolStripButton1
            // 
            this.toolStripButton1.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Text;
            this.toolStripButton1.Image = ((System.Drawing.Image)(resources.GetObject("toolStripButton1.Image")));
            this.toolStripButton1.ImageTransparentColor = System.Drawing.Color.Magenta;
            this.toolStripButton1.Name = "toolStripButton1";
            this.toolStripButton1.Size = new System.Drawing.Size(133, 22);
            this.toolStripButton1.Text = "Reload edited template";
            this.toolStripButton1.Click += new System.EventHandler(this.toolStripButton1_Click_1);
            // 
            // SzablonyForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(995, 505);
            this.Controls.Add(this.splitContainer);
            this.Controls.Add(this.toolStrip1);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "SzablonyForm";
            this.Text = "Szablony";
            this.toolStrip1.ResumeLayout(false);
            this.toolStrip1.PerformLayout();
            this.splitContainer.Panel1.ResumeLayout(false);
            this.splitContainer.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer)).EndInit();
            this.splitContainer.ResumeLayout(false);
            this.splitContainer2.Panel1.ResumeLayout(false);
            this.splitContainer2.Panel2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.splitContainer2)).EndInit();
            this.splitContainer2.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.xtraTabControl1)).EndInit();
            this.xtraTabControl1.ResumeLayout(false);
            this.xtraTabPage1.ResumeLayout(false);
            this.xtraTabPage1.PerformLayout();
            this.toolStrip2.ResumeLayout(false);
            this.toolStrip2.PerformLayout();
            this.xtraTabPage2.ResumeLayout(false);
            this.xtraTabPage2.PerformLayout();
            this.toolStrip3.ResumeLayout(false);
            this.toolStrip3.PerformLayout();
            this.tpTags.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage2.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion

        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStrip toolStrip1;
        private System.Windows.Forms.SplitContainer splitContainer;
        private System.Windows.Forms.SplitContainer splitContainer2;
        private System.Windows.Forms.PropertyGrid propertyGrid;
        private DevExpress.XtraRichEdit.RichEditControl richEditControl;
        private DevExpress.XtraTab.XtraTabControl xtraTabControl1;
        private DevExpress.XtraTab.XtraTabPage xtraTabPage1;
        private System.Windows.Forms.ToolStrip toolStrip2;
        private System.Windows.Forms.ToolStripButton toolStripButton4;
        private DevExpress.XtraTab.XtraTabPage xtraTabPage2;
        private DevExpress.XtraPdfViewer.PdfViewer pdfViewer1;
        private System.Windows.Forms.ToolStrip toolStrip3;
        private System.Windows.Forms.ToolStripButton toolStripButton5;
        private System.Windows.Forms.ToolStripButton toolStripButton6;
        private System.Windows.Forms.ToolStripButton toolStripButton7;
        private System.Windows.Forms.ToolStripButton toolStripButton8;
        private System.Windows.Forms.ToolStripButton toolStripButton9;
        private System.Windows.Forms.RichTextBox richTextBox1;
        private System.Windows.Forms.TreeView treeView;
        private System.Windows.Forms.ToolStripButton toolStripButton10;
        private System.Windows.Forms.TabControl tpTags;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.ListBox lbTags;
        private System.Windows.Forms.Button button1;
        private System.Windows.Forms.TreeView treeView1;
        private System.Windows.Forms.Button button2;
        private System.Windows.Forms.ToolStripButton toolStripButton11;
        private System.Windows.Forms.ToolStripButton toolStripButton1;
    }
}



