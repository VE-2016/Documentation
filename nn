using DevExpress.Pdf;
using DevExpress.XtraPrinting;
using DevExpress.XtraRichEdit;
using DevExpress.XtraRichEdit.API.Layout;
using DevExpress.XtraRichEdit.API.Native;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using PdfSharp.Pdf.IO;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using PdfDocument = PdfSharp.Pdf.PdfDocument;
using PdfName = PdfSharp.Pdf.PdfName;
using PdfPage = PdfSharp.Pdf.PdfPage;
using PdfRectangle = DevExpress.Pdf.PdfRectangle;

namespace TemplatesEx
{
    public partial class Form1 : Form
    {

        string filename_doc = "d.docx";

        static readonly string checkedCheckBox = '\u2612'.ToString();
        static readonly string uncheckedCheckBox = '\u2610'.ToString();

        bool mouseButtonPressed = false;
        PdfDocumentPosition startPosition;
        PdfDocumentPosition endPosition;

        List<Spanner> w = null;

        public Form1()
        {
            InitializeComponent();

            richEditControl.LoadDocument("d.docx");

            //DocumentPosition currentPosition = document.CaretPosition;
            //DevExpress.XtraRichEdit.API.Native.CheckBox checkBox = document.FormFields.InsertCheckBox(currentPosition);
            //checkBox.Name = "check1";
            //checkBox.State = CheckBoxState.Checked;
            //checkBox.SizeMode = CheckBoxSizeMode.Auto;
            //checkBox.HelpTextType = FormFieldTextType.Custom;
            //checkBox.HelpText = "help text";

            Bitmap img = null;
            using (RichEditDocumentServer server = new RichEditDocumentServer())
            {
                server.RtfText = richEditControl.Document.Sections[0].Page.ToString();
                PrintableComponentLink pLink = new PrintableComponentLink(new PrintingSystem());
                pLink.Component = server;
                using (MemoryStream ms = new MemoryStream())
                {
                    pLink.ExportToImage(ms, new ImageExportOptions() { Format = System.Drawing.Imaging.ImageFormat.Png });
                    ms.Position = 0;
                    img = new Bitmap(ms);
                }
                img.MakeTransparent();
            }


            pdfViewer1.FileAttachmentOpening += PdfViewer1_FileAttachmentOpening;

            pdfViewer1.UriOpening += PdfViewer1_UriOpening;

            richEditControl.MouseClick += RichEditControl_MouseClick;

            pdfViewer1.MouseDown += PdfViewer1_MouseDown;

            pdfViewer1.MouseMove += PdfViewer1_MouseMove;

            pdfViewer1.MouseUp += PdfViewer1_MouseUp;

            pdfViewer1.Paint += PdfViewer1_Paint;

        }

      

        public void Hyperlinks(string filename)
        {
            using (PdfDocumentProcessor documentProcessor = new PdfDocumentProcessor())
            {
                documentProcessor.LoadDocument(filename);

                foreach(var page in documentProcessor.Document.Pages)
                {
                    foreach(var nn in page.Annotations)
                    {
                        if(nn.GetType() == typeof(PdfLinkAnnotation))
                        {
                            PdfLinkAnnotation p = (PdfLinkAnnotation)nn;

                            if(p.UriAction != null)
                            {
                                //PdfDocumentPosition()
                            }
                        }
                    }
                }


                //PdfFormData formData = documentProcessor.GetFormData();
                //IList<string> names = formData.GetFieldNames();


                //string[] strings = new string[names.Count];
                //names.CopyTo(strings, 0);

            }
        }

        private void PdfViewer1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            //g.DrawRectangle(Pens.Red, new Rectangle(150, 150, 800, 50));

            if (startPosition != null && endPosition != null)
            {
                PointF startPoint = pdfViewer1.GetClientPoint(startPosition);
                PointF endPoint = pdfViewer1.GetClientPoint(endPosition);

                using (SolidBrush blueBrush = new SolidBrush(Color.FromArgb(128, Color.Aqua)))
                {
                    g.FillRectangle(blueBrush,
                    RectangleF.FromLTRB(Math.Min(startPoint.X, endPoint.X), Math.Min(startPoint.Y, endPoint.Y),
                    Math.Max(startPoint.X, endPoint.X), Math.Max(startPoint.Y, endPoint.Y)));
                }
            }
        }

        private void PdfViewer1_MouseUp(object sender, MouseEventArgs e)
        {
            mouseButtonPressed = false;
        }

        private void PdfViewer1_MouseMove(object sender, MouseEventArgs e)
        {
            if (mouseButtonPressed)
            {
                endPosition = pdfViewer1.GetDocumentPosition(e.Location);
                pdfViewer1.Invalidate();
            }
        }

        private void PdfViewer1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                startPosition = pdfViewer1.GetDocumentPosition(e.Location);
                endPosition = null;
                mouseButtonPressed = true;
                pdfViewer1.Invalidate();
            }
        }

        private void RichEditControl_MouseClick(object sender, MouseEventArgs e)
        {
           
        }

        public void UpdateCheckState(SubDocument document, DocumentRange range, string prevState)
        {
            if (prevState.Equals(checkedCheckBox))
                document.Replace(range, uncheckedCheckBox);
            else if (prevState.Equals(uncheckedCheckBox))
                document.Replace(range, checkedCheckBox);
        }
        public SubDocumentType GetLocation(LayoutElement element)
        {
            while (element != null)
            {
                switch (element.Type)
                {
                    case LayoutType.CommentsArea:
                        return SubDocumentType.Comment;
                    case LayoutType.Header:
                        return SubDocumentType.Header;
                    case LayoutType.Footer:
                        return SubDocumentType.Footer;
                    case LayoutType.TextBox:
                        return SubDocumentType.TextBox;
                }
                element = element.Parent;
            }
            return SubDocumentType.Main;
        }
        private void PdfViewer1_UriOpening(object sender, DevExpress.XtraPdfViewer.PdfUriOpeningEventArgs e)
        {
            CheckIfNeeded(e.Uri.OriginalString);
            e.Cancel = true;
        }

        private void PdfViewer1_FileAttachmentOpening(object sender, DevExpress.XtraPdfViewer.PdfFileAttachmentOpeningEventArgs e)
        {
            MessageBox.Show(e.FileAttachment.FileName);
        }

        public void Doc2Pdf(string filename)
        {
            RichEditDocumentServer wordProcessor = new RichEditDocumentServer();
            wordProcessor.LoadDocument(filename, DocumentFormat.OpenXml);

            //Specify export options:
            PdfExportOptions options = new PdfExportOptions();
            options.DocumentOptions.Author = "MJ";
            options.Compressed = false;
            options.ImageQuality = PdfJpegImageQuality.Highest;

            //Export the document to the stream:
            using (FileStream pdfFileStream = new FileStream("Document_PDF.pdf", FileMode.Create))
            {
                wordProcessor.ExportToPdf(pdfFileStream, options);
            }
           // System.Diagnostics.Process.Start("Document_PDF.pdf");
        }

        void Update()
        {
            pdfViewer1.SuspendLayout();
            richEditControl.SuspendLayout();
            var p = pdfViewer1.VerticalScrollPosition;
            pdfViewer1.CloseDocument();
            richEditControl.ExportToPdf("d.pdf");
            pdfViewer1.LoadDocument("d.pdf");
            pdfViewer1.VerticalScrollPosition = p;
            richEditControl.ResumeLayout();
            pdfViewer1.ResumeLayout();
        }

        private void SearchEditControl(RichEditControl richEditControl,string text, List<Spanner> spanners)
        {

            List<DocumentRange> results = new List<DocumentRange>();

            var document = richEditControl.Document;
            ISearchResult searchResult = richEditControl.Document.StartSearch(text);
            while (searchResult.FindNext())
            {
                CharacterProperties cp = richEditControl.Document.BeginUpdateCharacters(searchResult.CurrentResult);
                cp.Bold = true;
                cp.ForeColor = System.Drawing.Color.Blue;
                cp.BackColor = System.Drawing.Color.Yellow;
                cp.Underline = UnderlineType.ThickSingle;
                richEditControl.Document.EndUpdateCharacters(cp);

                results.Add(searchResult.CurrentResult);
             
            }
            int i = 0;
            foreach(var r in results)
            {
                string link = i.ToString();
                var h = document.Hyperlinks.Create(r.Start, 4);
                h.NavigateUri = i.ToString();
                h.ToolTip = i.ToString();
                spanners.AddDocumentRange(i, r, link);
                i++;
            }
        }

        List<Spanner> spanners = new List<Spanner>();

        List<Spanner> T = new List<Spanner>();

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            // Doc2Pdf("d.docx");

            //  var s = Words("d.pdf");

            //  var w = s.Where(p => p.Contains("<S>")).ToList();

            // var s = Referenced("e.pdf");

            pdfViewer1.CloseDocument();

            richEditControl.SaveDocument(filename_doc, DocumentFormat.Doc);

            richEditControl.ExportToPdf(@"d.pdf");

            this.pdfViewer1.LoadDocument(@"d.pdf");


            
            List<Spanner> q = NewMethod("<S>").ToArray().ToList();

            spanners = q;

            SearchEditControl(richEditControl, "<S>", q);//U+2611
            string codePoint = "2611";

            int code = int.Parse(codePoint, System.Globalization.NumberStyles.HexNumber);
            string unicodeString = char.ConvertFromUtf32(code);

            foreach (var s in spanners)
            {
                richEditControl.Document.Replace(s.rsecond, "");
                richEditControl.Document.Replace(s.rfirst, unicodeString);
            }

            //MemoryStream ms = new MemoryStream();  
            //richEditControl1.SaveDocument(ms, DevExpress.XtraRichEdit.DocumentFormat.OpenDocument);

            pdfViewer1.CloseDocument();

          //  richEditControl.ExportToPdf("d.pdf");

            var ww = NewMethod("<T>").ToArray().ToList();

            Modify(ww);

            w = ww;

          //  Update();
        }


        public void Modify(List<Spanner> ww)
        {
            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                

             //   if (pdfViewer1..Document.AcroForm != null)
                {
                    var q = processor.Document.AcroForm.Fields[0];

                }

            }


                pdfViewer1.SuspendLayout();

            pdfViewer1.CloseDocument();

            List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {

                richEditControl.ExportToPdf("d.pdf");

                processor.LoadDocument("d.pdf");

                int i = 1;

                foreach(var s in ww)
                {
                    double top = s.first.Top;
                    double left = s.first.Left;
                    double bottom = s.second.Top - s.second.Height;
                    double right = s.second.Left + s.second.Width;

                    PdfRectangle r  = new PdfRectangle(left, bottom, right, top);

                    PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField("textbox" + i++.ToString(), s.f.PageNumber, r);

                

                    textBox.Text = "Text Box";

                    if (w != null)
                        textBox.Text = Text;
                    
                    textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
                    textBox.Appearance.FontSize = 12;
                    textBox.Multiline = true;

                    processor.AddFormFields(textBox);

                    s.textBox = textBox;

                }

                processor.SaveDocument("d.pdf");
            }


            pdfViewer1.LoadDocument("d.pdf");

            pdfViewer1.ResumeLayout();
        }

        private static List<Spanner> NewMethod(string s)
        {
            List<Spanner> spanners = new List<Spanner>();

            PdfTextSearchParameters c = new PdfTextSearchParameters();
            c.WholeWords = false;
            c.CaseSensitive = true;
            List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                processor.LoadDocument("d.pdf");
                PdfTextSearchResults currentWords = processor.FindText(s, c);

                while (currentWords.Status == PdfTextSearchStatus.Found)
                {

                    WordCoordinates.Add(currentWords);
                    //Switch to the next word
                    currentWords = processor.FindText(s, c);

                }
            }
            var q = WordCoordinates.ToArray().ToList();

            while (q.Count > 1)
            {
                spanners.Add(Spanner.ToSpanner(q[0].ToTag(), q[1].ToTag()));
                q.RemoveAt(0);
                q.RemoveAt(0);
            }
            return spanners;
        }

        public void CheckIfNeeded(string link)
        {



            Spanner s = spanners.LinkToSpanner(link);

            if (s == null)
                return;

            var document = richEditControl.Document;

            document.BeginUpdate();
          
            DocumentRange range = s.rfirst;

            DocumentRange rr = s.rsecond;

            CharacterProperties cp = document.BeginUpdateCharacters(range.Start, rr.Start.ToInt() - range.End.ToInt());
            //cp.FontName = "Comic Sans MS";
          
            if (s.isActive)
            {
               // cp.FontSize = 18;
                cp.ForeColor = Color.Blue;
            }
            else
            {
              //  cp.FontSize = 14;
                cp.ForeColor = Color.Black;
            }

            s.isActive = !s.isActive;
            cp.BackColor = Color.Snow;
            cp.Underline = UnderlineType.DoubleWave;
            cp.UnderlineColor = Color.Red;

            document.EndUpdateCharacters(cp);

            Modify(w);

          //  Update();
        }


        public static string GetElementStream(PdfPage page, int elementIndex)
        {
            string strStreamValue;
            byte[] streamValue;
            strStreamValue = "";

            if (page.Contents.Elements.Count >= elementIndex)
            {
                PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(elementIndex).Stream;
                streamValue = stream.Value;

                foreach (byte b in streamValue)
                {
                    strStreamValue += (char)b;
                }
            }
            return strStreamValue;

            

            //Page.Contents.Elements.RemoveAt(8)
        }

        public void AddAcroForm(string filename)
        {
                        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                // Load a document.
                processor.LoadDocument(filename);

                // Create a text box field specifying the field name, page number, and field location on the page.
                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField("text box", 1, new PdfRectangle(230, 690, 280, 710));

                // Specify text box text, and appearance.
                textBox.Text = "Text Box";
                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.5, 0.3);
                textBox.Appearance.FontSize = 12;

       

                // Create a radio group field specifying its name and the page number.
                PdfAcroFormRadioGroupField radioGroup = new PdfAcroFormRadioGroupField("Gender Group", 1);

                // Add the first radio button to the group and specify its location using a PdfRectangle object.
                radioGroup.AddButton("button1", new PdfRectangle(230, 635, 250, 655));

                // Add the second radio button to the group.
                radioGroup.AddButton("button2", new PdfRectangle(310, 635, 330, 655));

                // Specify radio group selected index, and appearance.
                radioGroup.SelectedIndex = 0;
                radioGroup.Appearance.BorderAppearance = new PdfAcroFormBorderAppearance()
                { Color = new PdfRGBColor(0.8, 0.5, 0.3), Width = 3 };

                // Add form fields to the page.
                processor.AddFormFields(textBox, radioGroup);

                // Save the result document.
                processor.SaveDocument(filename);
            }
        }

        public static void AddTextBox(string filename)
        {

            using (PdfSharp.Pdf.PdfDocument pdf = /*PdfReader.Open(filename))// ; ;*/ new PdfDocument())
            {

                var f = pdf.AcroForm;


                PdfPage page1 = pdf.AddPage();

                double left = 50;
                double right = 200;
                double bottom = 450;
                double top = 425;

                PdfArray rect = new PdfArray(pdf);
                rect.Elements.Add(new PdfReal(left));
                rect.Elements.Add(new PdfReal(bottom));
                rect.Elements.Add(new PdfReal(right));
                rect.Elements.Add(new PdfReal(top));
                pdf.Internals.AddObject(rect);

                PdfDictionary form = new PdfDictionary(pdf);
                form.Elements.Add("/Filter", new PdfName("/FlateDecode"));
                form.Elements.Add("/Length", new PdfInteger(20));
                form.Elements.Add("/Subtype", new PdfName("/Form"));
                form.Elements.Add("/Type", new PdfName("/XObject"));
                pdf.Internals.AddObject(form);

                PdfDictionary appearanceStream = new PdfDictionary(pdf);
                appearanceStream.Elements.Add("/N", form);
                
                pdf.Internals.AddObject(appearanceStream);

                PdfDictionary textfield = new PdfDictionary(pdf);
                textfield.Elements.Add("/FT", new PdfName("/Btn"/*Tx*/));
                textfield.Elements.Add("/Subtype", new PdfName("/Widget"));
                //textfield.Elements.Add("/T", new PdfString("fldHelloWorld"));
                //textfield.Elements.Add("/V", new PdfString("Hello World!"));
                textfield.Elements.Add("/CA", new PdfString("BUTTON"));
                textfield.Elements.Add("/Type", new PdfName("/Annot"));
                textfield.Elements.Add("/AP", appearanceStream);
                textfield.Elements.Add("/Rect", rect);
                textfield.Elements.Add("/P", page1);
               
                pdf.Internals.AddObject(textfield);

                PdfArray annotsArray = new PdfArray(pdf);
                annotsArray.Elements.Add(textfield);
                
                pdf.Internals.AddObject(annotsArray);

                page1.Elements.Add("/Annots", annotsArray);

               // draw rectangle around text field
               XGraphics gfx = XGraphics.FromPdfPage(page1);
                gfx.DrawRectangle(new XPen(XColors.DarkOrange, 2), left, bottom, right, bottom - top);

                XPdfFontOptions options = new XPdfFontOptions(PdfFontEncoding.Unicode,
                                              PdfFontEmbedding.Always);

                XFont prevCheckboxFont = new XFont("WingDings", 12, XFontStyle.Regular, options);

                XRect prevCheckboxPos = new XRect(XUnit.FromInch(3.20), XUnit.FromInch(3.30),
                                                  XUnit.FromInch(1.25), XUnit.FromInch(.10));
                string prevCheckboxText = "\u00FE";
                gfx.DrawString(prevCheckboxText, prevCheckboxFont, XBrushes.Black,
                               prevCheckboxPos, XStringFormats.TopLeft);


                // Save document
                const string filename2 = @"cc.pdf";
                pdf.Save(filename2);
                pdf.Close();

                Process.Start(filename2);
            }
        }

        public static void AddTextBox()
        {

            using (PdfDocument pdf = new PdfDocument())
            {
                PdfPage page1 = pdf.AddPage();

                double left = 50;
                double right = 200;
                double bottom = 750;
                double top = 725;

                PdfArray rect = new PdfArray(pdf);
                rect.Elements.Add(new PdfReal(left));
                rect.Elements.Add(new PdfReal(bottom));
                rect.Elements.Add(new PdfReal(right));
                rect.Elements.Add(new PdfReal(top));
                pdf.Internals.AddObject(rect);

                PdfDictionary form = new PdfDictionary(pdf);
                form.Elements.Add("/Filter", new PdfName("/FlateDecode"));
                form.Elements.Add("/Length", new PdfInteger(20));
                form.Elements.Add("/Subtype", new PdfName("/Form"));
                form.Elements.Add("/Type", new PdfName("/XObject"));
                pdf.Internals.AddObject(form);

                PdfDictionary appearanceStream = new PdfDictionary(pdf);
                appearanceStream.Elements.Add("/N", form);
                pdf.Internals.AddObject(appearanceStream);

                PdfDictionary textfield = new PdfDictionary(pdf);
                textfield.Elements.Add("/FT", new PdfName("/Tx"));
                textfield.Elements.Add("/DA", new PdfString("test"));
                textfield.Elements.Add("/Subtype", new PdfName("/Widget"));
                textfield.Elements.Add("/T", new PdfString("fldHelloWorld"));
                textfield.Elements.Add("/V", new PdfString("Hello World!"));
                textfield.Elements.Add("/Type", new PdfName("/Annot"));
                textfield.Elements.Add("/AP", appearanceStream);
                textfield.Elements.Add("/Rect", rect);
                textfield.Elements.Add("/P", page1);
                pdf.Internals.AddObject(textfield);

                PdfArray annotsArray = new PdfArray(pdf);
                annotsArray.Elements.Add(textfield);
                pdf.Internals.AddObject(annotsArray);

                page1.Elements.Add("/Annots", annotsArray);

                // draw rectangle around text field
                //XGraphics gfx = XGraphics.FromPdfPage(page1);
                //gfx.DrawRectangle(new XPen(XColors.DarkOrange, 2), left, 40, right, bottom - top);

                // Save document
                const string filename = @"test.pdf";
                pdf.Save(filename);
                pdf.Close();

                Process.Start(filename);
            }
        }

            public void PDFParser()
        {
            var streamWriter = new StreamWriter("output.txt", false);
            String outputText = "";

            try
            {
                PdfDocument inputDocument = PdfReader.Open("input.pdf", PdfDocumentOpenMode.ReadOnly);

                foreach (PdfPage page in inputDocument.Pages)
                {
                    for (int index = 0; index < page.Contents.Elements.Count; index++)
                    {
                        PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(index).Stream;
                        outputText = new PDFTextExtractor().ExtractTextFromPDFBytes(stream.Value);

                        streamWriter.WriteLine(outputText);
                    }
                }

            }
            catch (Exception e)
            {

            }
            streamWriter.Close();
        }

        public List<string> Words(string filename)
        {
            List<string> s = new List<string>();

           // var streamWriter = new StreamWriter("output.txt", false);
            String outputText = "";

            try
            {
                PdfDocument inputDocument = PdfReader.Open(filename, PdfDocumentOpenMode.ReadOnly);

                foreach (PdfPage page in inputDocument.Pages)
                {
                    for (int index = 0; index < page.Contents.Elements.Count; index++)
                    {
                        PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(index).Stream;
                        outputText = new PDFTextExtractor().ExtractTextFromPDFBytes(stream.Value);

                        // streamWriter.WriteLine(outputText);

                        s.Add(outputText);
                    }
                }

            }
            catch (Exception e)
            {

            }
            // streamWriter.Close();

            return s;
        }

        private List<string> Referenced(string filename/*, PdfDocument document*//*, string referenceString*/)
        {

            PdfDocument document = PdfReader.Open(filename, PdfDocumentOpenMode.ReadOnly);

            List<string> s = new List<string>();

            // this procedure removes any pages from the pdf document that do not contain
            // the reference string

            int pageNo = -1;
            string strStreamValue;
            byte[] streamValue;
            bool[] keepPageArray;
            keepPageArray = new bool[document.Pages.Count];

            // iterate through the pages
            foreach (PdfPage page in document.Pages)
            {
                pageNo++;
                strStreamValue = "";

                // put the stream value for every element on the page in a string variable.
                for (int i = 0; i < page.Contents.Elements.Count; i++)
                {

                    StringWriter sw = new StringWriter();

                    PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(i).Stream;
                    streamValue = stream.Value;
                    foreach (byte b in streamValue)
                    {
                        sw.Write((char)b);
                        //strStreamValue += (char)b;
                    }

                    s.Add(sw.ToString());
                }
                // flag those pages that contain the reference value
              //  keepPageArray[pageNo] = strStreamValue.Contains(referenceString);
            }

            // Now, remove the pages we identified.  We're doing this in reverse order
            // because the deletion of an earlier page moves the rest of the pages up
            // on page.  This keeps us from deleting the wrong pages.
            for (int i = keepPageArray.Length - 1; i > -1; i--)
            {
                if (!keepPageArray[i])
                {
                    PdfPage deletePage = document.Pages[i];
                    //document.Pages.Remove(deletePage);
                }
            }

            return s;
        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            richEditControl.SaveDocument( "d.docx", DocumentFormat.OpenXml);
        }

        private void toolStripButton3_Click(object sender, EventArgs e)
        {
            Form2 form = new Form2();
            form.ShowDialog();
        }

        private void toolStripButton4_Click(object sender, EventArgs e)
        {
            richEditControl.ExportToPdf(@"d.pdf");

            this.pdfViewer1.LoadDocument(@"d.pdf");

            using (PdfDocumentProcessor pdfProcessor = new PdfDocumentProcessor())
            {
                pdfProcessor.LoadDocument("_b.pdf");

                var f = pdfProcessor.Document.AcroForm;
            }
        }

        private void toolStripButton5_Click(object sender, EventArgs e)
        {

            var document = richEditControl.Document;

            var c = richEditControl.Document.CaretPosition;

            //Create a hyperlink from a found range
            var h = document.Hyperlinks.Create(c, 10);

            //Set the URI and the tooltip for the created hyperlink
            h.NavigateUri = "F-1";// "https://www.devexpress.com/Products/NET/Controls/WinForms/Rich_Editor/";
            h.ToolTip = "Form-1";
            h.Target = "F-2";// "https://www.devexpress.com/Products/NET/Controls/WinForms/Rich_Editor/";
        }

        private void toolStripButton6_Click(object sender, EventArgs e)
        {
            DocumentPosition currentPosition = richEditControl.Document.CaretPosition;
            DevExpress.XtraRichEdit.API.Native.CheckBox checkBox = richEditControl.Document.FormFields.InsertCheckBox(currentPosition);
            checkBox.Name = "check1";
            checkBox.State = DevExpress.XtraRichEdit.API.Native.CheckBoxState.Checked;
            checkBox.SizeMode = CheckBoxSizeMode.Auto;
            checkBox.HelpTextType = FormFieldTextType.Custom;
            checkBox.HelpText = "help text";

            

        }

        private void toolStripButton7_Click(object sender, EventArgs e)
        {

            richEditControl.SaveDocument(filename_doc, DocumentFormat.Doc);

            //richEditControl.ExportToPdf(@"d.pdf");

           // this.pdfViewer1.LoadDocument(@"d.pdf");


            return;

            var c = richEditControl.Document.CaretPosition;

            var document = richEditControl.Document;
            document.AppendText("Line One\nLine Two\nLine Three");
            Shape myPicture = document.Shapes.InsertTextBox(c);
            myPicture.HorizontalAlignment = ShapeHorizontalAlignment.Center;
            myPicture.Fill.Color = Color.Blue;
        }
    }

}

     

    public class PDFTextExtractor
    {
        /// BT = Beginning of a text object operator
        /// ET = End of a text object operator
        /// Td move to the start of next line
        ///  5 Ts = superscript
        /// -5 Ts = subscript

        #region Fields

        #region _numberOfCharsToKeep
        /// <summary>
        /// The number of characters to keep, when extracting text.
        /// </summary>
        private static int _numberOfCharsToKeep = 15;
        #endregion

        #endregion



        #region ExtractTextFromPDFBytes
        /// <summary>
        /// This method processes an uncompressed Adobe (text) object
        /// and extracts text.
        /// </summary>
        /// <param name="input">uncompressed</param>
        /// <returns></returns>
        public string ExtractTextFromPDFBytes(byte[] input)
        {
            if (input == null || input.Length == 0) return "";

            try
            {
                string resultString = "";

                // Flag showing if we are we currently inside a text object
                bool inTextObject = false;

                // Flag showing if the next character is literal
                // e.g. '\\' to get a '\' character or '\(' to get '('
                bool nextLiteral = false;

                // () Bracket nesting level. Text appears inside ()
                int bracketDepth = 0;

                // Keep previous chars to get extract numbers etc.:
                char[] previousCharacters = new char[_numberOfCharsToKeep];
                for (int j = 0; j < _numberOfCharsToKeep; j++) previousCharacters[j] = ' ';


                for (int i = 0; i < input.Length; i++)
                {
                    char c = (char)input[i];

                    if (inTextObject)
                    {
                        // Position the text
                        if (bracketDepth == 0)
                        {
                            if (CheckToken(new string[] { "TD", "Td" }, previousCharacters))
                            {
                                resultString += "\n\r";
                            }
                            else
                            {
                                if (CheckToken(new string[] { "'", "T*", "\"" }, previousCharacters))
                                {
                                    resultString += "\n";
                                }
                                else
                                {
                                    if (CheckToken(new string[] { "Tj" }, previousCharacters))
                                    {
                                        resultString += " ";
                                    }
                                }
                            }
                        }

                        // End of a text object, also go to a new line.
                        if (bracketDepth == 0 &&
                            CheckToken(new string[] { "ET" }, previousCharacters))
                        {

                            inTextObject = false;
                            resultString += " ";
                        }
                        else
                        {
                            // Start outputting text
                            if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))
                            {
                                bracketDepth = 1;
                            }
                            else
                            {
                                // Stop outputting text
                                if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))
                                {
                                    bracketDepth = 0;
                                }
                                else
                                {
                                    // Just a normal text character:
                                    if (bracketDepth == 1)
                                    {
                                        // Only print out next character no matter what.
                                        // Do not interpret.
                                        if (c == '\\' && !nextLiteral)
                                        {
                                            nextLiteral = true;
                                        }
                                        else
                                        {
                                            if (((c >= ' ') && (c <= '~')) ||
                                                ((c >= 128) && (c < 255)))
                                            {
                                                resultString += c.ToString();
                                            }

                                            nextLiteral = false;
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // Store the recent characters for
                    // when we have to go back for a checking
                    for (int j = 0; j < _numberOfCharsToKeep - 1; j++)
                    {
                        previousCharacters[j] = previousCharacters[j + 1];
                    }
                    previousCharacters[_numberOfCharsToKeep - 1] = c;

                    // Start of a text object
                    if (!inTextObject && CheckToken(new string[] { "BT" }, previousCharacters))
                    {
                        inTextObject = true;
                    }
                }
                return resultString;
            }
            catch
            {
                return "";
            }
        }
        #endregion

        #region CheckToken
        /// <summary>
        /// Check if a certain 2 character token just came along (e.g. BT)
        /// </summary>
        /// <param name="search">the searched token</param>
        /// <param name="recent">the recent character array</param>
        /// <returns></returns>
        private bool CheckToken(string[] tokens, char[] recent)
        {
            foreach (string token in tokens)
            {
                if (token.Length > 1)
                {
                    if ((recent[_numberOfCharsToKeep - 3] == token[0]) &&
                        (recent[_numberOfCharsToKeep - 2] == token[1]) &&
                        ((recent[_numberOfCharsToKeep - 1] == ' ') ||
                        (recent[_numberOfCharsToKeep - 1] == 0x0d) ||
                        (recent[_numberOfCharsToKeep - 1] == 0x0a)) &&
                        ((recent[_numberOfCharsToKeep - 4] == ' ') ||
                        (recent[_numberOfCharsToKeep - 4] == 0x0d) ||
                        (recent[_numberOfCharsToKeep - 4] == 0x0a))
                        )
                    {
                        return true;
                    }
                }
                else
                {
                    return false;
                }

            }
            return false;
        }
        #endregion
  

   

}

public class Tag
{
    public string Name { get; set; } = "";

    public PdfOrientedRectangle r { get; set; }

    public int PageNumber { get; set; } = 0;
}

public class Spanner
{
    public string Name { get; set; } = "";

    public PdfOrientedRectangle first { get; set; }

    public PdfOrientedRectangle second { get; set; }

    public DocumentRange rfirst { get; set; }
    
    public DocumentRange rsecond { get; set; }

    public Tag f { get; set; }

    public Tag s { get; set; }

    public string linkfirst { get; set; }

    public string linksecond { get; set; }

    public string Text { get; set; } = "";

    public bool isActive { get; set; } = true;

    public PdfAcroFormTextBoxField textBox = null;

  
    public void AddDocumentRange(int i, DocumentRange r, string link)
    {
        if(i == 0)
        {
            rfirst = r;
            linkfirst = link;
        }
        else
        {
            rsecond = r;
            linksecond = link;
        }
    }

    static public Spanner ToSpanner(Tag _f, Tag _s)
    {
        return new Spanner() { Name = _f.Name, first = _f.r, second = _s.r, f = _f, s = _s };
    }
}

public static class Ext
{

    static public Tag ToTag(this PdfTextSearchResults s)
    {

        Tag t = new Tag();

        var ws = s.Words.Select(w => w.Text).ToList();

        t.Name = string.Concat(ws);

        t.r = s.Rectangles[0];

        t.PageNumber = s.PageNumber;

        return t;

    }

    static public void AddDocumentRange(this List<Spanner> s, int i, DocumentRange r, string link)
    {
        int index = i / 2;

        int c = s.Count;

        if (c == 0)
            return;

        if (index >= c)
            return;

        s[index].AddDocumentRange(i % 2, r, link);
    }

    static public Spanner LinkToSpanner(this List<Spanner> s, string link)
    
    ================================================================================================================================
    
    using DevExpress.Pdf;
using DevExpress.Utils.Extensions;
using DevExpress.XtraPdfViewer;
using DevExpress.XtraPrinting;
using DevExpress.XtraRichEdit;
using DevExpress.XtraRichEdit.API.Layout;
using DevExpress.XtraRichEdit.API.Native;
using PdfSharp.Drawing;
using PdfSharp.Pdf;
using PdfSharp.Pdf.IO;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static Ext;
using PdfDocument = PdfSharp.Pdf.PdfDocument;
using PdfName = PdfSharp.Pdf.PdfName;
using PdfPage = PdfSharp.Pdf.PdfPage;
using PdfRectangle = DevExpress.Pdf.PdfRectangle;

namespace TemplatesEx
{
    public partial class Form1 : Form
    {

        string filename_doc = "d.docx";

        static readonly string checkedCheckBox = '\u2612'.ToString();
        static readonly string uncheckedCheckBox = '\u2610'.ToString();

        bool mouseButtonPressed = false;
        PdfDocumentPosition startPosition;
        PdfDocumentPosition endPosition;

        List<Spanner> ww = null;
        List<Spanner> ff = null;

        public Form1()
        {
            InitializeComponent();

            //richEditControl.LoadDocument("d.docx");

            //DocumentPosition currentPosition = document.CaretPosition;
            //DevExpress.XtraRichEdit.API.Native.CheckBox checkBox = document.FormFields.InsertCheckBox(currentPosition);
            //checkBox.Name = "check1";
            //checkBox.State = CheckBoxState.Checked;
            //checkBox.SizeMode = CheckBoxSizeMode.Auto;
            //checkBox.HelpTextType = FormFieldTextType.Custom;
            //checkBox.HelpText = "help text";

            //Bitmap img = null;
            //using (RichEditDocumentServer server = new RichEditDocumentServer())
            //{
            //    server.RtfText = richEditControl.Document.Sections[0].Page.ToString();
            //    PrintableComponentLink pLink = new PrintableComponentLink(new PrintingSystem());
            //    pLink.Component = server;
            //    using (MemoryStream ms = new MemoryStream())
            //    {
            //        pLink.ExportToImage(ms, new ImageExportOptions() { Format = System.Drawing.Imaging.ImageFormat.Png });
            //        ms.Position = 0;
            //        img = new Bitmap(ms);
            //    }
            //    img.MakeTransparent();
            //}


            pdfViewer1.FileAttachmentOpening += PdfViewer1_FileAttachmentOpening;

            pdfViewer1.UriOpening += PdfViewer1_UriOpening;

            richEditControl.MouseClick += RichEditControl_MouseClick;

            pdfViewer1.MouseDown += PdfViewer1_MouseDown;

            pdfViewer1.MouseMove += PdfViewer1_MouseMove;

            pdfViewer1.MouseUp += PdfViewer1_MouseUp;

            pdfViewer1.Paint += PdfViewer1_Paint;

            pdf = new PDF();
            pdf.rec = richEditControl;
            pdf.pdfViewer = pdfViewer1;

            pdf.LoadFiles();
            pdf.Load();

        }

        PDF pdf { get; set; }

        public void Hyperlinks(string filename)
        {
            using (PdfDocumentProcessor documentProcessor = new PdfDocumentProcessor())
            {
                documentProcessor.LoadDocument(filename);

                foreach (var page in documentProcessor.Document.Pages)
                {
                    foreach (var nn in page.Annotations)
                    {
                        if (nn.GetType() == typeof(PdfLinkAnnotation))
                        {
                            PdfLinkAnnotation p = (PdfLinkAnnotation)nn;

                            if (p.UriAction != null)
                            {
                                //PdfDocumentPosition()
                            }
                        }
                    }
                }


                //PdfFormData formData = documentProcessor.GetFormData();
                //IList<string> names = formData.GetFieldNames();


                //string[] strings = new string[names.Count];
                //names.CopyTo(strings, 0);

            }
        }

        private void PdfViewer1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            //g.DrawRectangle(Pens.Red, new Rectangle(150, 150, 800, 50));

            if (startPosition != null && endPosition != null)
            {
                PointF startPoint = pdfViewer1.GetClientPoint(startPosition);
                PointF endPoint = pdfViewer1.GetClientPoint(endPosition);

                using (SolidBrush blueBrush = new SolidBrush(Color.FromArgb(128, Color.Aqua)))
                {
                    g.FillRectangle(blueBrush,
                    RectangleF.FromLTRB(Math.Min(startPoint.X, endPoint.X), Math.Min(startPoint.Y, endPoint.Y),
                    Math.Max(startPoint.X, endPoint.X), Math.Max(startPoint.Y, endPoint.Y)));
                }
            }
        }

        private void PdfViewer1_MouseUp(object sender, MouseEventArgs e)
        {
            mouseButtonPressed = false;
        }

        private void PdfViewer1_MouseMove(object sender, MouseEventArgs e)
        {
            if (mouseButtonPressed)
            {
                endPosition = pdfViewer1.GetDocumentPosition(e.Location);
                pdfViewer1.Invalidate();
            }
        }

        private void PdfViewer1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                startPosition = pdfViewer1.GetDocumentPosition(e.Location);
                endPosition = null;
                mouseButtonPressed = true;
                pdfViewer1.Invalidate();
            }
        }

        private void RichEditControl_MouseClick(object sender, MouseEventArgs e)
        {

        }

        public void UpdateCheckState(SubDocument document, DocumentRange range, string prevState)
        {
            if (prevState.Equals(checkedCheckBox))
                document.Replace(range, uncheckedCheckBox);
            else if (prevState.Equals(uncheckedCheckBox))
                document.Replace(range, checkedCheckBox);
        }
        public SubDocumentType GetLocation(LayoutElement element)
        {
            while (element != null)
            {
                switch (element.Type)
                {
                    case LayoutType.CommentsArea:
                        return SubDocumentType.Comment;
                    case LayoutType.Header:
                        return SubDocumentType.Header;
                    case LayoutType.Footer:
                        return SubDocumentType.Footer;
                    case LayoutType.TextBox:
                        return SubDocumentType.TextBox;
                }
                element = element.Parent;
            }
            return SubDocumentType.Main;
        }
        private void PdfViewer1_UriOpening(object sender, DevExpress.XtraPdfViewer.PdfUriOpeningEventArgs e)
        {
            CheckIfNeeded(e.Uri.OriginalString);
            e.Cancel = true;
        }

        private void PdfViewer1_FileAttachmentOpening(object sender, DevExpress.XtraPdfViewer.PdfFileAttachmentOpeningEventArgs e)
        {
            MessageBox.Show(e.FileAttachment.FileName);
        }

        public void Doc2Pdf(string filename)
        {
            RichEditDocumentServer wordProcessor = new RichEditDocumentServer();
            wordProcessor.LoadDocument(filename, DocumentFormat.OpenXml);

            //Specify export options:
            PdfExportOptions options = new PdfExportOptions();
            options.DocumentOptions.Author = "MJ";
            options.Compressed = false;
            options.ImageQuality = PdfJpegImageQuality.Highest;

            //Export the document to the stream:
            using (FileStream pdfFileStream = new FileStream("Document_PDF.pdf", FileMode.Create))
            {
                wordProcessor.ExportToPdf(pdfFileStream, options);
            }
            // System.Diagnostics.Process.Start("Document_PDF.pdf");
        }

        void Update()
        {
            pdfViewer1.SuspendLayout();
            richEditControl.SuspendLayout();
            var p = pdfViewer1.VerticalScrollPosition;
            pdfViewer1.CloseDocument();
            richEditControl.ExportToPdf("d.pdf");
            pdfViewer1.LoadDocument("d.pdf");
            pdfViewer1.VerticalScrollPosition = p;
            richEditControl.ResumeLayout();
            pdfViewer1.ResumeLayout();
        }

        private void SearchEditControl(RichEditControl richEditControl, string text, List<Spanner> spanners)
        {

            List<DocumentRange> results = new List<DocumentRange>();

            var document = richEditControl.Document;
            ISearchResult searchResult = richEditControl.Document.StartSearch(text);
            while (searchResult.FindNext())
            {
                CharacterProperties cp = richEditControl.Document.BeginUpdateCharacters(searchResult.CurrentResult);
                cp.Bold = true;
                cp.ForeColor = System.Drawing.Color.Blue;
                cp.BackColor = System.Drawing.Color.Yellow;
                cp.Underline = UnderlineType.ThickSingle;
                richEditControl.Document.EndUpdateCharacters(cp);

                results.Add(searchResult.CurrentResult);

            }
            int i = 0;
            foreach (var r in results)
            {
                string link = i.ToString();
                var h = document.Hyperlinks.Create(r.Start, 4);
                h.NavigateUri = i.ToString();
                h.ToolTip = i.ToString();
                spanners.AddDocumentRange(i, r, link);
                i++;
            }
        }

        List<Spanner> spanners = new List<Spanner>();

        List<Spanner> T = new List<Spanner>();

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            // Doc2Pdf("d.docx");

            //  var s = Words("d.pdf");

            //  var w = s.Where(p => p.Contains("<S>")).ToList();

            // var s = Referenced("e.pdf");

            pdfViewer1.CloseDocument();

            richEditControl.SaveDocument(filename_doc, DocumentFormat.Doc);

            richEditControl.ExportToPdf(@"d.pdf");

            this.pdfViewer1.LoadDocument(@"d.pdf");



            List<Spanner> q = NewMethod("<S>").ToArray().ToList();

            spanners = q;

            SearchEditControl(richEditControl, "<S>", q);//U+2611
            string codePoint = "2611";

            int code = int.Parse(codePoint, System.Globalization.NumberStyles.HexNumber);
            string unicodeString = char.ConvertFromUtf32(code);

            foreach (var s in spanners)
            {
                richEditControl.Document.Replace(s.rsecond, "");
                richEditControl.Document.Replace(s.rfirst, unicodeString);
            }




            //MemoryStream ms = new MemoryStream();  
            //richEditControl1.SaveDocument(ms, DevExpress.XtraRichEdit.DocumentFormat.OpenDocument);

            pdfViewer1.CloseDocument();

            //  richEditControl.ExportToPdf("d.pdf");


            //List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
            //using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            //    foreach (var s in ww)
            //    {

            //        double top = s.first.Top;
            //        double left = s.first.Left;
            //        double bottom = s.second.Top - s.second.Height;
            //        double right = s.second.Left + s.second.Width;

            //        PdfRectangle r = new PdfRectangle(left, bottom, right, top);

            //        PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField("textbox" + i++.ToString(), s.f.PageNumber, r);

            //        textBox.Text = "Text Box";

            //        if (w != null)
            //            textBox.Text = Text;

            //        textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
            //        textBox.Appearance.FontSize = 12;
            //        textBox.Multiline = true;

            //        processor.AddFormFields(textBox);

            //        s.textBox = textBox;
            //    }
            var w = NewMethod("<T>").ToArray().ToList();
            Modify(w);
            ww = w;

            w = NewMethod("<F>").ToArray().ToList();
            Modify(w);
            ff = w;


            //  Update();
        }


        public void Modify(List<Spanner> ww)
        {

            pdfViewer1.SuspendLayout();

            try
            {
                if (pdfViewer1.IsDocumentOpened)
                    pdfViewer1.SaveDocument("d.pdf");
            }
            catch (Exception ex)
            {

            }

            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                processor.LoadDocument("d.pdf");

                PdfAcroFormTextBoxField t = null;

                if (processor.Document.AcroForm != null)
                {
                    int i = 0;

                    var fields = processor.Document.AcroForm.Fields;

                    // fields.IndexOf(t);


                    var name = fields[1].Name;

                    var index = fields.IndexOf(fields[1]);


                    foreach (var f in processor.Document.AcroForm.Fields)
                    {
                        PdfTextFormField ff = (PdfTextFormField)f;





                        //PdfAcroFormTextBoxField
                        ww[i++].Text = ff.Text;
                    }

                }
                processor.CloseDocument();
            }

            pdfViewer1.CloseDocument();


            List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {

                richEditControl.ExportToPdf("d.pdf");

                processor.LoadDocument("d.pdf");

                int i = 1;

                foreach (var s in ww)
                {
                    double top = s.first.Top;
                    double left = s.first.Left;
                    double bottom = s.second.Top - s.second.Height;
                    double right = s.second.Left + s.second.Width;

                    PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                    PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField("textbox" + i++.ToString(), s.f.PageNumber, r);


                    textBox.Text = "Text Box";

                    if (!string.IsNullOrEmpty(s.Text))
                        textBox.Text = s.Text;

                    textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
                    textBox.Appearance.FontSize = 12;
                    textBox.Multiline = true;

                    processor.AddFormFields(textBox);

                    s.textBox = textBox;

                }

                processor.SaveDocument("d.pdf");
            }


            pdfViewer1.LoadDocument("d.pdf");

            pdfViewer1.ResumeLayout();
        }

        private static List<Spanner> NewMethod(string s)
        {
            List<Spanner> spanners = new List<Spanner>();

            PdfTextSearchParameters c = new PdfTextSearchParameters();
            c.WholeWords = false;
            c.CaseSensitive = true;
            List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                processor.LoadDocument("d.pdf");
                PdfTextSearchResults currentWords = processor.FindText(s, c);

                while (currentWords.Status == PdfTextSearchStatus.Found)
                {

                    WordCoordinates.Add(currentWords);
                    //Switch to the next word
                    currentWords = processor.FindText(s, c);

                }
            }
            var q = WordCoordinates.ToArray().ToList();

            while (q.Count > 1)
            {
                spanners.Add(Spanner.ToSpanner(q[0].ToTag(), q[1].ToTag()));
                q.RemoveAt(0);
                q.RemoveAt(0);
            }
            return spanners;
        }

        public void CheckIfNeeded(string link)
        {



            Spanner s = spanners.LinkToSpanner(link);

            if (s == null)
                return;

            var document = richEditControl.Document;

            document.BeginUpdate();

            DocumentRange range = s.rfirst;

            DocumentRange rr = s.rsecond;

            CharacterProperties cp = document.BeginUpdateCharacters(range.Start, rr.Start.ToInt() - range.End.ToInt());
            //cp.FontName = "Comic Sans MS";

            if (s.isActive)
            {
                // cp.FontSize = 18;
                cp.ForeColor = Color.Blue;
            }
            else
            {
                //  cp.FontSize = 14;
                cp.ForeColor = Color.Black;
            }

            s.isActive = !s.isActive;
            cp.BackColor = Color.Snow;
            cp.Underline = UnderlineType.DoubleWave;
            cp.UnderlineColor = Color.Red;

            document.EndUpdateCharacters(cp);

            Modify(ww);

            //  Update();
        }


        public static string GetElementStream(PdfPage page, int elementIndex)
        {
            string strStreamValue;
            byte[] streamValue;
            strStreamValue = "";

            if (page.Contents.Elements.Count >= elementIndex)
            {
                PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(elementIndex).Stream;
                streamValue = stream.Value;

                foreach (byte b in streamValue)
                {
                    strStreamValue += (char)b;
                }
            }
            return strStreamValue;



            //Page.Contents.Elements.RemoveAt(8)
        }

        public void AddAcroForm(string filename)
        {
            using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                // Load a document.
                processor.LoadDocument(filename);

                // Create a text box field specifying the field name, page number, and field location on the page.
                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField("text box", 1, new PdfRectangle(230, 690, 280, 710));

                // Specify text box text, and appearance.
                textBox.Text = "Text Box";
                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.5, 0.3);
                textBox.Appearance.FontSize = 12;



                // Create a radio group field specifying its name and the page number.
                PdfAcroFormRadioGroupField radioGroup = new PdfAcroFormRadioGroupField("Gender Group", 1);

                // Add the first radio button to the group and specify its location using a PdfRectangle object.
                radioGroup.AddButton("button1", new PdfRectangle(230, 635, 250, 655));

                // Add the second radio button to the group.
                radioGroup.AddButton("button2", new PdfRectangle(310, 635, 330, 655));

                // Specify radio group selected index, and appearance.
                radioGroup.SelectedIndex = 0;
                radioGroup.Appearance.BorderAppearance = new PdfAcroFormBorderAppearance()
                { Color = new PdfRGBColor(0.8, 0.5, 0.3), Width = 3 };

                // Add form fields to the page.
                processor.AddFormFields(textBox, radioGroup);

                // Save the result document.
                processor.SaveDocument(filename);
            }
        }

        public static void AddTextBox(string filename)
        {

            using (PdfSharp.Pdf.PdfDocument pdf = /*PdfReader.Open(filename))// ; ;*/ new PdfDocument())
            {

                var f = pdf.AcroForm;


                PdfPage page1 = pdf.AddPage();

                double left = 50;
                double right = 200;
                double bottom = 450;
                double top = 425;

                PdfArray rect = new PdfArray(pdf);
                rect.Elements.Add(new PdfReal(left));
                rect.Elements.Add(new PdfReal(bottom));
                rect.Elements.Add(new PdfReal(right));
                rect.Elements.Add(new PdfReal(top));
                pdf.Internals.AddObject(rect);

                PdfDictionary form = new PdfDictionary(pdf);
                form.Elements.Add("/Filter", new PdfName("/FlateDecode"));
                form.Elements.Add("/Length", new PdfInteger(20));
                form.Elements.Add("/Subtype", new PdfName("/Form"));
                form.Elements.Add("/Type", new PdfName("/XObject"));
                pdf.Internals.AddObject(form);

                PdfDictionary appearanceStream = new PdfDictionary(pdf);
                appearanceStream.Elements.Add("/N", form);

                pdf.Internals.AddObject(appearanceStream);

                PdfDictionary textfield = new PdfDictionary(pdf);
                textfield.Elements.Add("/FT", new PdfName("/Btn"/*Tx*/));
                textfield.Elements.Add("/Subtype", new PdfName("/Widget"));
                //textfield.Elements.Add("/T", new PdfString("fldHelloWorld"));
                //textfield.Elements.Add("/V", new PdfString("Hello World!"));
                textfield.Elements.Add("/CA", new PdfString("BUTTON"));
                textfield.Elements.Add("/Type", new PdfName("/Annot"));
                textfield.Elements.Add("/AP", appearanceStream);
                textfield.Elements.Add("/Rect", rect);
                textfield.Elements.Add("/P", page1);

                pdf.Internals.AddObject(textfield);

                PdfArray annotsArray = new PdfArray(pdf);
                annotsArray.Elements.Add(textfield);

                pdf.Internals.AddObject(annotsArray);

                page1.Elements.Add("/Annots", annotsArray);

                // draw rectangle around text field
                XGraphics gfx = XGraphics.FromPdfPage(page1);
                gfx.DrawRectangle(new XPen(XColors.DarkOrange, 2), left, bottom, right, bottom - top);

                XPdfFontOptions options = new XPdfFontOptions(PdfFontEncoding.Unicode,
                                              PdfFontEmbedding.Always);

                XFont prevCheckboxFont = new XFont("WingDings", 12, XFontStyle.Regular, options);

                XRect prevCheckboxPos = new XRect(XUnit.FromInch(3.20), XUnit.FromInch(3.30),
                                                  XUnit.FromInch(1.25), XUnit.FromInch(.10));
                string prevCheckboxText = "\u00FE";
                gfx.DrawString(prevCheckboxText, prevCheckboxFont, XBrushes.Black,
                               prevCheckboxPos, XStringFormats.TopLeft);


                // Save document
                const string filename2 = @"cc.pdf";
                pdf.Save(filename2);
                pdf.Close();

                Process.Start(filename2);
            }
        }

        public static void AddTextBox()
        {

            using (PdfDocument pdf = new PdfDocument())
            {
                PdfPage page1 = pdf.AddPage();

                double left = 50;
                double right = 200;
                double bottom = 750;
                double top = 725;

                PdfArray rect = new PdfArray(pdf);
                rect.Elements.Add(new PdfReal(left));
                rect.Elements.Add(new PdfReal(bottom));
                rect.Elements.Add(new PdfReal(right));
                rect.Elements.Add(new PdfReal(top));
                pdf.Internals.AddObject(rect);

                PdfDictionary form = new PdfDictionary(pdf);
                form.Elements.Add("/Filter", new PdfName("/FlateDecode"));
                form.Elements.Add("/Length", new PdfInteger(20));
                form.Elements.Add("/Subtype", new PdfName("/Form"));
                form.Elements.Add("/Type", new PdfName("/XObject"));
                pdf.Internals.AddObject(form);

                PdfDictionary appearanceStream = new PdfDictionary(pdf);
                appearanceStream.Elements.Add("/N", form);
                pdf.Internals.AddObject(appearanceStream);

                PdfDictionary textfield = new PdfDictionary(pdf);
                textfield.Elements.Add("/FT", new PdfName("/Tx"));
                textfield.Elements.Add("/DA", new PdfString("test"));
                textfield.Elements.Add("/Subtype", new PdfName("/Widget"));
                textfield.Elements.Add("/T", new PdfString("fldHelloWorld"));
                textfield.Elements.Add("/V", new PdfString("Hello World!"));
                textfield.Elements.Add("/Type", new PdfName("/Annot"));
                textfield.Elements.Add("/AP", appearanceStream);
                textfield.Elements.Add("/Rect", rect);
                textfield.Elements.Add("/P", page1);
                pdf.Internals.AddObject(textfield);

                PdfArray annotsArray = new PdfArray(pdf);
                annotsArray.Elements.Add(textfield);
                pdf.Internals.AddObject(annotsArray);

                page1.Elements.Add("/Annots", annotsArray);

                // draw rectangle around text field
                //XGraphics gfx = XGraphics.FromPdfPage(page1);
                //gfx.DrawRectangle(new XPen(XColors.DarkOrange, 2), left, 40, right, bottom - top);

                // Save document
                const string filename = @"test.pdf";
                pdf.Save(filename);
                pdf.Close();

                Process.Start(filename);
            }
        }

        public void PDFParser()
        {
            var streamWriter = new StreamWriter("output.txt", false);
            String outputText = "";

            try
            {
                PdfDocument inputDocument = PdfReader.Open("input.pdf", PdfDocumentOpenMode.ReadOnly);

                foreach (PdfPage page in inputDocument.Pages)
                {
                    for (int index = 0; index < page.Contents.Elements.Count; index++)
                    {
                        PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(index).Stream;
                        outputText = new PDFTextExtractor().ExtractTextFromPDFBytes(stream.Value);

                        streamWriter.WriteLine(outputText);
                    }
                }

            }
            catch (Exception e)
            {

            }
            streamWriter.Close();
        }

        public List<string> Words(string filename)
        {
            List<string> s = new List<string>();

            // var streamWriter = new StreamWriter("output.txt", false);
            String outputText = "";

            try
            {
                PdfDocument inputDocument = PdfReader.Open(filename, PdfDocumentOpenMode.ReadOnly);

                foreach (PdfPage page in inputDocument.Pages)
                {
                    for (int index = 0; index < page.Contents.Elements.Count; index++)
                    {
                        PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(index).Stream;
                        outputText = new PDFTextExtractor().ExtractTextFromPDFBytes(stream.Value);

                        // streamWriter.WriteLine(outputText);

                        s.Add(outputText);
                    }
                }

            }
            catch (Exception e)
            {

            }
            // streamWriter.Close();

            return s;
        }

        private List<string> Referenced(string filename/*, PdfDocument document*//*, string referenceString*/)
        {

            PdfDocument document = PdfReader.Open(filename, PdfDocumentOpenMode.ReadOnly);

            List<string> s = new List<string>();

            // this procedure removes any pages from the pdf document that do not contain
            // the reference string

            int pageNo = -1;
            string strStreamValue;
            byte[] streamValue;
            bool[] keepPageArray;
            keepPageArray = new bool[document.Pages.Count];

            // iterate through the pages
            foreach (PdfPage page in document.Pages)
            {
                pageNo++;
                strStreamValue = "";

                // put the stream value for every element on the page in a string variable.
                for (int i = 0; i < page.Contents.Elements.Count; i++)
                {

                    StringWriter sw = new StringWriter();

                    PdfDictionary.PdfStream stream = page.Contents.Elements.GetDictionary(i).Stream;
                    streamValue = stream.Value;
                    foreach (byte b in streamValue)
                    {
                        sw.Write((char)b);
                        //strStreamValue += (char)b;
                    }

                    s.Add(sw.ToString());
                }
                // flag those pages that contain the reference value
                //  keepPageArray[pageNo] = strStreamValue.Contains(referenceString);
            }

            // Now, remove the pages we identified.  We're doing this in reverse order
            // because the deletion of an earlier page moves the rest of the pages up
            // on page.  This keeps us from deleting the wrong pages.
            for (int i = keepPageArray.Length - 1; i > -1; i--)
            {
                if (!keepPageArray[i])
                {
                    PdfPage deletePage = document.Pages[i];
                    //document.Pages.Remove(deletePage);
                }
            }

            return s;
        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            richEditControl.SaveDocument("d.docx", DocumentFormat.OpenXml);
        }

        private void toolStripButton3_Click(object sender, EventArgs e)
        {
            Form2 form = new Form2();
            form.ShowDialog();
        }

        private void toolStripButton4_Click(object sender, EventArgs e)
        {
            richEditControl.ExportToPdf(@"d.pdf");

            this.pdfViewer1.LoadDocument(@"d.pdf");

            using (PdfDocumentProcessor pdfProcessor = new PdfDocumentProcessor())
            {
                pdfProcessor.LoadDocument("_b.pdf");

                var f = pdfProcessor.Document.AcroForm;
            }
        }

        private void toolStripButton5_Click(object sender, EventArgs e)
        {

            var document = richEditControl.Document;

            var c = richEditControl.Document.CaretPosition;

            //Create a hyperlink from a found range
            var h = document.Hyperlinks.Create(c, 10);

            //Set the URI and the tooltip for the created hyperlink
            h.NavigateUri = "F-1";// "https://www.devexpress.com/Products/NET/Controls/WinForms/Rich_Editor/";
            h.ToolTip = "Form-1";
            h.Target = "F-2";// "https://www.devexpress.com/Products/NET/Controls/WinForms/Rich_Editor/";
        }

        private void toolStripButton6_Click(object sender, EventArgs e)
        {
            DocumentPosition currentPosition = richEditControl.Document.CaretPosition;
            DevExpress.XtraRichEdit.API.Native.CheckBox checkBox = richEditControl.Document.FormFields.InsertCheckBox(currentPosition);
            checkBox.Name = "check1";
            checkBox.State = DevExpress.XtraRichEdit.API.Native.CheckBoxState.Checked;
            checkBox.SizeMode = CheckBoxSizeMode.Auto;
            checkBox.HelpTextType = FormFieldTextType.Custom;
            checkBox.HelpText = "help text";


            List<Spanner> q = NewMethod("<T>").ToArray().ToList();

            spanners = q;


        }

        private void toolStripButton7_Click(object sender, EventArgs e)
        {

            richEditControl.SaveDocument(filename_doc, DocumentFormat.Doc);

            //richEditControl.ExportToPdf(@"d.pdf");

            // this.pdfViewer1.LoadDocument(@"d.pdf");


            return;

            var c = richEditControl.Document.CaretPosition;

            var document = richEditControl.Document;
            document.AppendText("Line One\nLine Two\nLine Three");
            Shape myPicture = document.Shapes.InsertTextBox(c);
            myPicture.HorizontalAlignment = ShapeHorizontalAlignment.Center;
            myPicture.Fill.Color = Color.Blue;
        }

        private void toolStripButton8_Click(object sender, EventArgs e)
        {
            pdfViewer1.SaveDocument("d.pdf");
        }

        private void toolStripButton9_Click(object sender, EventArgs e)
        {

        }
    }

}



public class PDFTextExtractor
{
    /// BT = Beginning of a text object operator
    /// ET = End of a text object operator
    /// Td move to the start of next line
    ///  5 Ts = superscript
    /// -5 Ts = subscript

    #region Fields

    #region _numberOfCharsToKeep
    /// <summary>
    /// The number of characters to keep, when extracting text.
    /// </summary>
    private static int _numberOfCharsToKeep = 15;
    #endregion

    #endregion



    #region ExtractTextFromPDFBytes
    /// <summary>
    /// This method processes an uncompressed Adobe (text) object
    /// and extracts text.
    /// </summary>
    /// <param name="input">uncompressed</param>
    /// <returns></returns>
    public string ExtractTextFromPDFBytes(byte[] input)
    {
        if (input == null || input.Length == 0) return "";

        try
        {
            string resultString = "";

            // Flag showing if we are we currently inside a text object
            bool inTextObject = false;

            // Flag showing if the next character is literal
            // e.g. '\\' to get a '\' character or '\(' to get '('
            bool nextLiteral = false;

            // () Bracket nesting level. Text appears inside ()
            int bracketDepth = 0;

            // Keep previous chars to get extract numbers etc.:
            char[] previousCharacters = new char[_numberOfCharsToKeep];
            for (int j = 0; j < _numberOfCharsToKeep; j++) previousCharacters[j] = ' ';


            for (int i = 0; i < input.Length; i++)
            {
                char c = (char)input[i];

                if (inTextObject)
                {
                    // Position the text
                    if (bracketDepth == 0)
                    {
                        if (CheckToken(new string[] { "TD", "Td" }, previousCharacters))
                        {
                            resultString += "\n\r";
                        }
                        else
                        {
                            if (CheckToken(new string[] { "'", "T*", "\"" }, previousCharacters))
                            {
                                resultString += "\n";
                            }
                            else
                            {
                                if (CheckToken(new string[] { "Tj" }, previousCharacters))
                                {
                                    resultString += " ";
                                }
                            }
                        }
                    }

                    // End of a text object, also go to a new line.
                    if (bracketDepth == 0 &&
                        CheckToken(new string[] { "ET" }, previousCharacters))
                    {

                        inTextObject = false;
                        resultString += " ";
                    }
                    else
                    {
                        // Start outputting text
                        if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))
                        {
                            bracketDepth = 1;
                        }
                        else
                        {
                            // Stop outputting text
                            if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))
                            {
                                bracketDepth = 0;
                            }
                            else
                            {
                                // Just a normal text character:
                                if (bracketDepth == 1)
                                {
                                    // Only print out next character no matter what.
                                    // Do not interpret.
                                    if (c == '\\' && !nextLiteral)
                                    {
                                        nextLiteral = true;
                                    }
                                    else
                                    {
                                        if (((c >= ' ') && (c <= '~')) ||
                                            ((c >= 128) && (c < 255)))
                                        {
                                            resultString += c.ToString();
                                        }

                                        nextLiteral = false;
                                    }
                                }
                            }
                        }
                    }
                }

                // Store the recent characters for
                // when we have to go back for a checking
                for (int j = 0; j < _numberOfCharsToKeep - 1; j++)
                {
                    previousCharacters[j] = previousCharacters[j + 1];
                }
                previousCharacters[_numberOfCharsToKeep - 1] = c;

                // Start of a text object
                if (!inTextObject && CheckToken(new string[] { "BT" }, previousCharacters))
                {
                    inTextObject = true;
                }
            }
            return resultString;
        }
        catch
        {
            return "";
        }
    }
    #endregion

    #region CheckToken
    /// <summary>
    /// Check if a certain 2 character token just came along (e.g. BT)
    /// </summary>
    /// <param name="search">the searched token</param>
    /// <param name="recent">the recent character array</param>
    /// <returns></returns>
    private bool CheckToken(string[] tokens, char[] recent)
    {
        foreach (string token in tokens)
        {
            if (token.Length > 1)
            {
                if ((recent[_numberOfCharsToKeep - 3] == token[0]) &&
                    (recent[_numberOfCharsToKeep - 2] == token[1]) &&
                    ((recent[_numberOfCharsToKeep - 1] == ' ') ||
                    (recent[_numberOfCharsToKeep - 1] == 0x0d) ||
                    (recent[_numberOfCharsToKeep - 1] == 0x0a)) &&
                    ((recent[_numberOfCharsToKeep - 4] == ' ') ||
                    (recent[_numberOfCharsToKeep - 4] == 0x0d) ||
                    (recent[_numberOfCharsToKeep - 4] == 0x0a))
                    )
                {
                    return true;
                }
            }
            else
            {
                return false;
            }

        }
        return false;
    }
    #endregion




}

public class Tag
{
    public string Name { get; set; } = "";

    public PdfOrientedRectangle r { get; set; }

    public int PageNumber { get; set; } = 0;
}

public class Spanner
{
    public string Name { get; set; } = "";

    public PdfOrientedRectangle first { get; set; }

    public PdfOrientedRectangle second { get; set; }

    public DocumentRange rfirst { get; set; }

    public DocumentRange rsecond { get; set; }

    public Tag f { get; set; }

    public Tag s { get; set; }

    public string linkfirst { get; set; }

    public string linksecond { get; set; }

    public string Text { get; set; } = "";

    public bool isActive { get; set; } = true;

    public PdfAcroFormTextBoxField textBox = null;


    public void AddDocumentRange(int i, DocumentRange r, string link)
    {
        if (i == 0)
        {
            rfirst = r;
            linkfirst = link;
        }
        else
        {
            rsecond = r;
            linksecond = link;
        }
    }

    static public Spanner ToSpanner(Tag _f, Tag _s)
    {
        return new Spanner() { Name = _f.Name, first = _f.r, second = _s.r, f = _f, s = _s };
    }
}

public static class Ext
{

    static IList<PdfInteractiveFormField> Fields { get; set; }

    static public void AddAndReplace(this PdfDocumentProcessor processor, Dictionary<string, PdfAcroFormTextBoxField> d, string name)
    {
        var Field = d[name];

        var fields = processor.Document.AcroForm.Fields;

        var field = fields.Where(s => s.Name == name).ToArray()[0];

        int i = fields.IndexOf(field);

        fields.Remove(field);

        string text = ((PdfTextFormField)field).Text;

        Field.Text = text + "super";

        processor.AddFormFields(Field);

        //field = fields.Where(s => s.Name == name).ToArray()[0];

        //i = fields.IndexOf(field);

        //fields.Remove(field);

        //fields.Insert(i, field);

    }

    static public Tag ToTag(this PdfTextSearchResults s)
    {

        Tag t = new Tag();

        var ws = s.Words.Select(w => w.Text).ToList();

        t.Name = string.Concat(ws);

        t.r = s.Rectangles[0];

        t.PageNumber = s.PageNumber;

        return t;

    }

    static public void AddDocumentRange(this List<Spanner> s, int i, DocumentRange r, string link, string text = "")
    {
        int index = i / 2;

        int c = s.Count;

        if (c == 0)
            return;

        if (index >= c)
            return;

        s[index].AddDocumentRange(i % 2, r, link);
    }

    static public Spanner LinkToSpanner(this List<Spanner> s, string link)
    {

        foreach (var spanner in s)
        {
            if (spanner.linkfirst == link || spanner.linksecond == link)
                return spanner;
        }
        return null;
    }

}
public class PDF
{

    public PdfViewer pdfViewer { get; set; }

    public RichEditControl rec { get; set; }

    List<Spanner> spanners = new List<Spanner>();

    List<Spanner> ww = new List<Spanner>();

    List<Spanner> f = new List<Spanner>();

    public List<PdfAcroFormField> fields = new List<PdfAcroFormField>();

    Dictionary<string, PdfAcroFormTextBoxField> dictLink2T = new Dictionary<string, PdfAcroFormTextBoxField>();

    public PDF()
    {

    }
    public void LoadFiles()
    {
        rec.LoadDocument("d.docx");
        pdfViewer.LoadDocument("d.pdf");
        pdfViewer.UriOpening += PdfViewer_UriOpening;
    }

    private void PdfViewer_UriOpening(object sender, PdfUriOpeningEventArgs e)
    {
        var s = e.Uri.OriginalString;
        MessageBox.Show(s);
        CheckIfNeeded("f1");
    }

    public void Load()
    {
        List<Spanner> q = NewMethod("<S>").ToArray().ToList();
        spanners = q;
        SearchEditControl(rec, "<S>", q);//U+2611
        string codePoint = "2611";
        int code = int.Parse(codePoint, System.Globalization.NumberStyles.HexNumber);
        string unicodeString = char.ConvertFromUtf32(code);
        foreach (var s in spanners)
        {
            rec.Document.Replace(s.rsecond, "");
            rec.Document.Replace(s.rfirst, unicodeString);
        }
        var www = NewMethod("<T>").ToArray().ToList();
        SearchEditControl(rec, "<T>", www, "t");

        var f = NewMethod("<F>").ToArray().ToList();
        SearchEditControl(rec, "<F>", f, "f");

        Modify(www, f);

    }

    private static List<Spanner> NewMethod(string s)
    {
        List<Spanner> spanners = new List<Spanner>();
        PdfTextSearchParameters c = new PdfTextSearchParameters();
        c.WholeWords = false;
        c.CaseSensitive = true;
        List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");
            PdfTextSearchResults currentWords = processor.FindText(s, c);
            while (currentWords.Status == PdfTextSearchStatus.Found)
            {
                WordCoordinates.Add(currentWords);
                currentWords = processor.FindText(s, c);
            }
        }
        var q = WordCoordinates.ToArray().ToList();
        while (q.Count > 1)
        {
            spanners.Add(Spanner.ToSpanner(q[0].ToTag(), q[1].ToTag()));
            q.RemoveAt(0);
            q.RemoveAt(0);
        }
        return spanners;
    }
    private void SearchEditControl(RichEditControl richEditControl, string text, List<Spanner> spanners, string prefix = "")
    {

        List<DocumentRange> results = new List<DocumentRange>();
        var document = rec.Document;
        ISearchResult searchResult = rec.Document.StartSearch(text);

        while (searchResult.FindNext())
        {
            CharacterProperties cp = richEditControl.Document.BeginUpdateCharacters(searchResult.CurrentResult.End, 4);
           // cp.Bold = true;
            cp.ForeColor = System.Drawing.Color.Blue;
            cp.BackColor = System.Drawing.Color.Yellow;
            cp.Underline = UnderlineType.ThickSingle;
            rec.Document.EndUpdateCharacters(cp);
            results.Add(searchResult.CurrentResult);
        }
        int k = 0;
        int i = 0;
        foreach (var r in results)
        {
            //string Text = "";
            //if (!string.IsNullOrEmpty(prefix))

            //    if (i % 2 == 1)
            //    {
            //        var a = results[i + 1].Start.ToInt();

            //        var b = results[i].End.ToInt();

            //        var range = rec.Document.CreateRange(results[i - 1].End, results[i].Start.ToInt() - results[i - 1].End.ToInt());

            //        Text = rec.Document.GetText(range);

            //        if (!Text.StartsWith("F"))

            //            Text = "";
            //    };

              //  else continue;
            string link = i.ToString();
        //    if (string.IsNullOrEmpty(Text))
            {
                var h = document.Hyperlinks.Create(r.End, 4);
                h.NavigateUri = prefix + "900";// i.ToString();
                h.ToolTip = prefix + i.ToString();
            }
            //else
            //{
            //    var h = document.Hyperlinks.Create(r.End, 4);
            //    h.NavigateUri = "6";
            //    h.ToolTip = prefix + i.ToString();
            //}
            //if (!string.IsNullOrEmpty(Text))
            //{
            //    //            h.NavigateUri = prefix + Text;
            //}
            spanners.AddDocumentRange(i, r, link, "Text");
            i++;
        }
    }
    public void CheckIfNeeded(string link)
    {
      //  Spanner s = spanners.LinkToSpanner(link);
      //  if (s == null)
       //     return;

        var document = rec.Document;
        document.BeginUpdate();

        //DocumentRange range = s.rfirst;
        //DocumentRange rr = s.rsecond;
        //CharacterProperties cp = document.BeginUpdateCharacters(range.Start, rr.Start.ToInt() - range.End.ToInt());

        ////cp.FontName = "Comic Sans MS";
        //if (s.isActive)
        //{
        //    // cp.FontSize = 18;
        //    cp.ForeColor = Color.Blue;
        //}
        //else
        //{
        //    //  cp.FontSize = 14;
        //    cp.ForeColor = Color.Black;
        //}
        //s.isActive = !s.isActive;
        //cp.BackColor = Color.Snow;
        //cp.Underline = UnderlineType.DoubleWave;
        //cp.UnderlineColor = Color.Red;

        //document.EndUpdateCharacters(cp);
        var ww = NewMethod("<T>").ToArray().ToList();
        var ff = NewMethod("<F>").ToArray().ToList();
        SearchEditControl(rec, "<T>", ww, "f");
        ModifyEx(ww, ff);
        //f = ff;
        this.ww = ww;
        //  Update();
    }

    public void Modify(List<Spanner> wws, List<Spanner> ff)
    {
        if (pdfViewer.IsDocumentOpened)
            pdfViewer.SaveDocument("d.pdf");

        List<PdfTextFormField> fl = new List<PdfTextFormField>();

        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");

            if (processor.Document.AcroForm != null)
            {
                int i = 0;
                foreach (var f in processor.Document.AcroForm.Fields)
                {
                    PdfTextFormField tf = (PdfTextFormField)f;
                    if (ww.Count > i)
                        ww[i++].Text = tf.Text;

                    fl.Add(tf);
                }
            }
            processor.CloseDocument();
        }
        float vScrollPosition = pdfViewer.VerticalScrollPosition;
        pdfViewer.SuspendLayout();
        pdfViewer.CloseDocument();
        List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            dictLink2T = new Dictionary<string, PdfAcroFormTextBoxField>();
            rec.ExportToPdf("d.pdf");
            processor.LoadDocument("d.pdf");
            int i = 1;
            int k = 0;
            foreach (var s in wws)
            {
                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width - 5;

                string Name = "textbox" + i++.ToString();

            //    if (!string.IsNullOrEmpty(s.TextForLink))

             //       Name = s.TextForLink;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(Name, s.f.PageNumber, r);

                if(!dictLink2T.ContainsKey(Name))

                                           dictLink2T.Add(Name, textBox);

                textBox.Text = "";
                if (ww.Count > k)
                {
                    var n = ww.Where(c => c.Name == Name).ToList();

                    if (n.Count > 0)
                        textBox.Text = n[0].Text;// ww[k++].Text;

                    var nn = fl.Where(c => c.Name == Name).ToList();
                    if (nn.Count > 0)
                        textBox.Text = nn[0].Text;
                }
                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
                textBox.Appearance.FontSize = 12;
                textBox.Multiline = true;
                processor.AddFormFields(textBox);
                s.textBox = textBox;
            }
            i = 1;
            foreach (var s in ff)
            {
                //if (s.textBox == null)
                //            continue;
                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                var name = "f" + i++.ToString();

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(name, s.f.PageNumber, r);

                dictLink2T.Add(name, textBox);

                textBox.Text = "-------";

                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);

                textBox.Appearance.FontSize = 12;

                textBox.Multiline = true;

                processor.AddFormFields(textBox);

                s.textBox = textBox;
            }
            processor.SaveDocument("d.pdf");
        }
        pdfViewer.LoadDocument("d.pdf");
        pdfViewer.VerticalScrollPosition = vScrollPosition;
        pdfViewer.ResumeLayout();
    }

    public void ModifyEx(List<Spanner> wws, List<Spanner> ff)
    {
        if (pdfViewer.IsDocumentOpened)
            pdfViewer.SaveDocument("d.pdf");

        List<PdfTextFormField> fl = new List<PdfTextFormField>();

        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");

            if (processor.Document.AcroForm != null)
            {
                int i = 0;
                foreach (var f in processor.Document.AcroForm.Fields)
                {
                    PdfTextFormField tf = (PdfTextFormField)f;
                    if (ww.Count > i)
                        ww[i++].Text = tf.Text;

                    fl.Add(tf);
                }
            }
            processor.CloseDocument();
        }
        float vScrollPosition = pdfViewer.VerticalScrollPosition;
        pdfViewer.SuspendLayout();
        pdfViewer.CloseDocument();
        List<PdfTextSearchResults> WordCoordinates = new List<PdfTextSearchResults>();
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
         //   dictLink2T = new Dictionary<string, PdfAcroFormTextBoxField>();
           // rec.ExportToPdf("d.pdf");
            processor.LoadDocument("d.pdf");
            int i = 1;
            int k = 0;
            foreach (var s in wws)
            {
                string Name = "textbox" + i++.ToString();

                processor.AddAndReplace(dictLink2T, Name);

                continue;

                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width - 5;

               // string Name = "textbox" + i++.ToString();

                //    if (!string.IsNullOrEmpty(s.TextForLink))

                //       Name = s.TextForLink;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(Name, s.f.PageNumber, r);

             //   if (!dictLink2T.ContainsKey(Name))

             //       dictLink2T.Add(Name, textBox);

                textBox.Text = "";
                if (ww.Count > k)
                {
                    var n = ww.Where(c => c.Name == Name).ToList();

                    if (n.Count > 0)
                        textBox.Text = n[0].Text;// ww[k++].Text;

                    var nn = fl.Where(c => c.Name == Name).ToList();
                    if (nn.Count > 0)
                        textBox.Text = nn[0].Text;
                }
                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);
                textBox.Appearance.FontSize = 12;
                textBox.Multiline = true;
                processor.AddFormFields(textBox);
                s.textBox = textBox;
            }
            i = 1;
            foreach (var s in ff)
            {
                var name = "f" + i++.ToString();

                processor.AddAndReplace(dictLink2T, name);

                continue;

                //if (s.textBox == null)
                //            continue;
                double top = s.first.Top;

                double left = s.first.Left;

                double bottom = s.second.Top - s.second.Height;

                double right = s.second.Left + s.second.Width;

                PdfRectangle r = new PdfRectangle(left, bottom, right, top);

              

                PdfAcroFormTextBoxField textBox = new PdfAcroFormTextBoxField(name, s.f.PageNumber, r);

                dictLink2T.Add(name, textBox);

                textBox.Text = "-------";

                textBox.Appearance.BackgroundColor = new PdfRGBColor(0.8, 0.9, 0.8);

                textBox.Appearance.FontSize = 12;

                textBox.Multiline = true;

                processor.AddFormFields(textBox);

                s.textBox = textBox;
            }
            processor.SaveDocument("d.pdf");
        }
        pdfViewer.LoadDocument("d.pdf");
        pdfViewer.VerticalScrollPosition = vScrollPosition;
        pdfViewer.ResumeLayout();
    }
    public void Add(PdfAcroFormTextBoxField f)
    {

    }

    public void Replace(PdfAcroFormTextBoxField t = null)
    {
        using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
        {
            processor.LoadDocument("d.pdf");


            if (processor.Document.AcroForm != null)
            {
                var fields = processor.Document.AcroForm.Fields;

                int i = 0;

                var F = new List<PdfInteractiveFormField>();

                F.AddRange(fields.ToList());

                fields.Clear();




                // fields.IndexOf(t);


                var name = fields[1].Name;

                var index = fields.IndexOf(fields[1]);


                foreach (var f in processor.Document.AcroForm.Fields)
                {
                    PdfTextFormField ff = (PdfTextFormField)f;





                    //PdfAcroFormTextBoxField
                    //  ww[i++].Text = ff.Text;
                }

            }
            processor.CloseDocument();
        }
    }
}


    {

        foreach(var spanner in s)
        {
            if (spanner.linkfirst == link || spanner.linksecond == link)
                return spanner;
        }
        return null;
    }

}

     using (PdfDocumentProcessor processor = new PdfDocumentProcessor())
            {
                processor.LoadDocument("d.pdf");

                if (processor.Document.AcroForm != null)
                {
                    int i = 0;
                  foreach(var f in processor.Document.AcroForm.Fields)
                    {
                        PdfTextFormField ff = (PdfTextFormField)f;
                        ww[i++].Text = ff.Text;
                    }

                }
                processor.CloseDocument();
            }
